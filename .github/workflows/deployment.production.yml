name: Deployment Production

on:
  release:
    types: [published]

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  preparation:
    name: Preparation
    runs-on: ubuntu-20.04
    outputs:
      previous-tag: ${{ steps.base.outputs.tag }}
      affected-apps: ${{ steps.configure-nx.outputs.affected-apps }}
      affected-lib: ${{ steps.configure-nx.outputs.affected-lib }}
      affected-e2e: ${{ steps.configure-nx.outputs.affected-e2e }}
      affected-package-container: ${{ steps.configure-nx.outputs.affected-package-container }}
      affected-deploy-static: ${{ steps.configure-nx.outputs.affected-deploy-static }}
      affected-deploy-container: ${{ steps.configure-nx.outputs.affected-deploy-container }}
    steps:
      - name: Checkout source code repository
        uses: actions/checkout@v4
        with:
          ref: "${{ github.ref }}"
          fetch-depth: 0

      - name: Determine base tag
        run: |
          PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -v ^dsg/ | grep -A 1 ^${{ github.ref_name }} | tail -n 1)
          echo "🏷️ PREVIOUS_TAG=$PREVIOUS_TAG (used to detect the affected projects)"
          echo "tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
        id: base

      - uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Cache global node modules
        id: cache-node-modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: npm ci

      - name: Evaluate affected projects
        id: configure-nx
        env:
          NX_EXCLUDE: "--exclude=data-service-generator"
        run: |
          echo affected-apps=$(npx nx print-affected --base=${{ steps.base.outputs.tag }} --type=app $NX_FORCE_ALL ${NX_EXCLUDE} | jq -c .projects) >> $GITHUB_OUTPUT
          echo affected-lib=$(npx nx print-affected --base=${{ steps.base.outputs.tag }} --type=lib $NX_FORCE_ALL $NX_EXCLUDE | jq -c .projects) >> $GITHUB_OUTPUT
          echo affected-e2e=$(npx nx print-affected --base=${{ steps.base.outputs.tag }} --target=e2e $NX_FORCE_ALL $NX_EXCLUDE | jq -c .projects) >> $GITHUB_OUTPUT
          echo affected-package-container=$(npx nx print-affected --base=${{ steps.base.outputs.tag }} --target=package:container --type=app $NX_FORCE_ALL $NX_EXCLUDE | jq -c .projects) >> $GITHUB_OUTPUT
          echo affected-deploy-static=$(npx nx print-affected --base=${{ steps.base.outputs.tag }} --target=deploy:static --type=app $NX_FORCE_ALL $NX_EXCLUDE  | jq -c .projects) >> $GITHUB_OUTPUT
          echo affected-deploy-container=$(npx nx print-affected --base=${{ steps.base.outputs.tag }} --target=deploy:container --type=app $NX_FORCE_ALL $NX_EXCLUDE  | jq -c .projects) >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT | grep affected

  package:
    name: Package
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        project: ${{ fromJson(needs.preparation.outputs.affected-package-container) }}
    needs: preparation
    steps:
      - name: Checkout source code repository
        uses: actions/checkout@v4
        with:
          ref: "${{ github.ref }}"

      - uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Cache global node modules
        id: cache-node-modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: npm ci

      - name: Configure AWS Credentials (operations account)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR (operations account)
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
          registries: "439403303254"

      # https://github.com/docker/metadata-action
      - name: Docker Metadata
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: "439403303254.dkr.ecr.us-east-1.amazonaws.com/${{ matrix.project }}"
          tags: |
            type=raw,value=${{ github.ref_name }}

      # https://www.npmjs.com/package/@nx-tools/nx-docker
      # GIT_REF_NAME and GIT_SHA variables are substituted in the project.json docker target build-args
      - name: Package
        run: npx nx package:container ${{ matrix.project }} --prod
        env:
          INPUT_TAGS: ${{ steps.meta.outputs.tags }}
          INPUT_PUSH: true
          GIT_REF_NAME: ${{ github.ref_name }}
          GIT_SHA: ${{ github.sha }}
          PRODUCTION_TAGS: true

  deployment-container:
    name: Deployment container
    runs-on: ubuntu-20.04
    environment: "production"
    needs: [preparation, package]
    steps:
      - name: Checkout manifest repository
        uses: actions/checkout@v4
        with:
          repository: "amplication/amplication-cluster-configuration"
          token: "${{ secrets.PAT }}"
          fetch-depth: "0"

      - name: Setup yq
        uses: mikefarah/yq@v4.30.8

      - name: Replace image tag
        run: |
          nx=${{ needs.preparation.outputs.affected-deploy-container }}
          array=$(echo $nx | sed -e 's/\[//g' -e 's/\]//g' -e 's/\,/ /g')

          for i in $array; do
            project=$(echo $i | sed -e "s/^amplication-//")
            yq -i ".$project.image.tag = \"${{ github.ref_name }}\"" production/applications/$project/values.yaml
            git add production/applications/$project/values.yaml
          done

      - name: Create pull request on cluster-configuration repository
        uses: peter-evans/create-pull-request@v4.2.3
        with:
          token: "${{ secrets.PAT }}"
          commit-message: "feat: image tag bump to ${{ github.ref_name }}"
          branch: "release/${{ github.ref_name }}"
          title: "Release: bump version of production environment to `${{ github.ref_name }}`"
          body: |
            This pull request was generated as a result of the `deployment.production.yml` workflow on the source code repository which is triggered when a release is created. This subsequently checksout the components that have been changed between this release and the previous one. Based on the affected projects it changes the image.tag where applicable. After merging this pull request, navigate to our argocd and synchronize the changes that are pending (make sure these are "correct/expected").

            Image to bump from `${{ needs.preparation.outputs.previous-tag }}` to `${{ github.ref_name }}`

            Note: after merging you will still need to do a manual sync of the applications that are in the `argocd project` called `applications`. 

            Releases: https://github.com/amplication/amplication/releases
          labels: "release"
          reviewers: "${{ github.actor }}"

  deployment-static:
    name: Deployment static
    needs: preparation
    if: ${{ needs.preparation.outputs.affected-deploy-static != '[]' && needs.preparation.outputs.affected-deploy-static != ''}}
    strategy:
      matrix:
        project: ${{ fromJson(needs.preparation.outputs.affected-deploy-static) }}
    uses: ./.github/workflows/deployment.static.template.yml
    with:
      environment-name: "production"
      project-name: ${{ matrix.project }}
      deploy-type: "static"
    secrets:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deploy To Staging

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-18.04
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
        with:
          driver-opts: image=moby/buildkit:master
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: "Build and push amplication/amplication Docker image"
        uses: docker/build-push-action@v2
        with:
          pull: true
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
            amplication/amplication:latest
            amplication/amplication:${{ github.sha }}
            gcr.io/amplication/amplication:${{ github.sha }}
      - uses: hashicorp/setup-terraform@v1
      - run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        working-directory: terraform/envs/dev
      - run: terraform apply -auto-approve -lock-timeout=1200s
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_image_id: gcr.io/amplication/amplication:${{ github.sha }}
          TF_VAR_github_app_private_key: ${{ secrets.STAGING_GITHUB_APP_PRIVATE_KEY }}
          TF_VAR_github_app_client_secret: ${{ secrets.STAGING_GITHUB_APP_CLIENT_SECRET }}
        working-directory: terraform/envs/dev
      - uses: mattes/gce-cloudsql-proxy-action@v1
        with:
          creds: ${{ secrets.GOOGLE_CREDENTIALS }}
          instance: ${{ secrets.STAGING_DB_INSTANCE_NAME }}
      - run: |
          set -e;
          docker run \
            --network host \
            --env POSTGRESQL_URL="postgresql://${{ secrets.STAGING_DB_USER }}:${{ secrets.STAGING_DB_PASSWORD }}@127.0.0.1:5432/${{ secrets.STAGING_DB_NAME }}" \
            amplication/amplication:${{ github.sha }} \
            npm run migrate:up

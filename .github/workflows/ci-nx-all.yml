name: Continuous Integration (Nx - All)

on:
  workflow_dispatch:

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  NX_BRANCH: ${{ github.ref_name }}

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.set-affected.outputs.affected }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: nrwl/nx-set-shas@v3
        with:
          main-branch-name: feature/nx

      - name: Cache node modules
        id: cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: cache-node-modules-${{ hashFiles('package-lock.json') }}

      - uses: actions/setup-node@v1
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          node-version: 16.x

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Nx Workspace Lint
        run: npx nx workspace-lint

      # - name: Nx Format Check
      #   run: npx nx format:check

      - name: Lint
        run: npx run-many --target=lint --parallel=3

      - name: Test
        run: npx run-many --target=test --parallel=3

      - name: Build
        run: |
          npx run-many --target=prebuild --parallel=3
          npx run-many --target=build --parallel=3
          npx run-many --target=postbuild --parallel=3

      - name: Set Affected
        id: set-affected
        run: |
          echo ::set-output name=affected::"$(npx nx print-affected --all --type=app | jq -c .projects)"

  dockerize:
    name: Dockerize
    runs-on: ubuntu-latest
    needs: ci
    strategy:
      matrix:
        project: ${{ fromJson(needs.ci.outputs.affected) }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v3
        with:
          main-branch-name: next

      - name: Cache node modules
        id: cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: cache-node-modules-${{ hashFiles('package-lock.json') }}

      - uses: actions/setup-node@v1
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          node-version: 16.x

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # https://github.com/docker/metadata-action
      - name: Docker Metadata
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: "407256539111.dkr.ecr.us-east-1.amazonaws.com/${{ matrix.project }}-nx-test"
          tags: |
            type=sha,prefix=sha-
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag

      - name: Dockerize
        run: npx nx run-many --target docker:build --projects=${{ matrix.project }}
        env:
          # https://www.npmjs.com/package/@nx-tools/nx-docker
          INPUT_TAGS: ${{ steps.meta.outputs.tags }}
          INPUT_PUSH: true

name: Release

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - master
      - next
      - chore/new-infra-cicd

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  NX_BRANCH: ${{ github.event.workflow_run.head_branch }}
  BRANCH: ${{ github.event.workflow_run.head_branch }}

jobs:
  nx:
    name: Nx Affected
    runs-on: ubuntu-20.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      affected: ${{ steps.configure-nx.outputs.affected }}
    steps:
      - name: Download artifact
        id: download-artifact
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "affected-projects"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/affected-projects.zip`, Buffer.from(download.data));
      
      - name: Configure Nx Affected Projects
        id: configure-nx
        run: | 
          unzip affected-projects.zip
          cat ./affected-projects >> $GITHUB_OUTPUT
        
      - name: Debug
        run: |
          echo github.event.workflow_run.conclusion ${{ github.event.workflow_run.conclusion }}
          echo github.event.workflow_run.event ${{ github.event.workflow_run.event }}
          echo NX_BRANCH $NX_BRANCH
          echo BRANCH $BRANCH
          echo AFFECTED_PROJECTS ${{ steps.configure-nx.affected }}

  dockerize:
    needs: nx
    if: ${{ needs.nx.outputs.affected != '[]' }}
    name: Dockerize
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        project: ${{ fromJson(needs.nx.outputs.affected) }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version-file: 'package.json'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Dependencies
        run: npm ci

      - name: Configure AWS Credentials (operations account)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR (operations account)
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: "439403303254"

      # https://github.com/docker/metadata-action
      - name: Docker Metadata
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: "439403303254.dkr.ecr.us-east-1.amazonaws.com/${{ matrix.project }}"
          tags: |
            type=sha,prefix=sha-
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=ref,event=tag,prefix=tag-
            type=raw,value=${{ github.run_id }},prefix=gh-
            type=raw,value=${{ github.env.BRANCH }}
            type=raw,value=latest,enable=${{ github.env.BRANCH == 'master' }}

      # https://www.npmjs.com/package/@nx-tools/nx-docker
      - name: Dockerize
        run: npx nx docker:build ${{ matrix.project }}
        env:
          INPUT_TAGS: ${{ steps.meta.outputs.tags }}
          INPUT_PUSH: true

  prepare:
    runs-on: ubuntu-20.04
    outputs:
      account-id: ${{ steps.configure-deploy-inputs.outputs.account-id }}
      account-name: ${{ steps.configure-deploy-inputs.outputs.account-name }}
      aws-access-key-id: ${{ steps.configure-deploy-inputs.outputs.aws-access-key-id }}
      aws-secret-access-key: ${{ steps.configure-deploy-inputs.outputs.aws-secret-access-key }}
    steps:
      - id: configure-deploy-inputs
        run: |
          if [[ "${{ github.env.BRANCH }}" == "next" ]];
          then
            echo account-name="sandbox" >> $GITHUB_OUTPUT
            echo account-id="${{ github.var.AWS_SANDBOX_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            echo aws-access-key-id="${{ github.secrets.AWS_SANDBOX_ACCESS_KEY_ID }}" >> $GITHUB_OUTPUT
            echo aws-secret-access-key="${{ github.secrets.AWS_SANDBOX_SECRET_ACCESS_KEY }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.env.BRANCH }}" == "master" ]];
          then
            echo account-name="staging" >> $GITHUB_OUTPUT
            echo account-id="${{ github.var.AWS_STAGING_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            echo aws-access-key-id="${{ github.secrets.AWS_STAGING_ACCESS_KEY_ID }}" >> $GITHUB_OUTPUT
            echo aws-secret-access-key="${{ github.secrets.AWS_STAGING_SECRET_ACCESS_KEY }}" >> $GITHUB_OUTPUT
          fi;
          
  deploy: 
    needs: [nx, dockerize, prepare]
    strategy:
      matrix:
        project: ${{ needs.nx.outputs.affected }}
    uses: ./.github/workflows/deployment.template.yml
    with:
      account-id: ${{ needs.prepare.outputs.account-id }}
      account-name: ${{ needs.prepare.outputs.account-name }}
      project-name: ${{ matrix.project }}
    secrets:
      aws-access-key-id: ${{ needs.prepare.outputs.aws-access-key-id }}
      aws-secret-access-key: ${{ needs.prepare.outputs.aws-secret-access-key }}
name: Release Production
run-name: Release Version ${{ github.event.inputs.version }}

on:
  workflow_dispatch:
    inputs:
      version: 
        type: string
        required: true
        description: Version used to update apps version.ts and create a release the commit. i.e. v1.0.0, v1.1.2, v2.0.1
      re-run: 
        type: boolean
        required: false
        default: false
        description: Check this ONLY if you want to re-run the workflow for the same version.
      nx-force-all:
        type: boolean
        description: Forces Nx to consider all projects as affected when running the update-version target.
        default: false
      draft-release:
        type: boolean
        description: Create a draft release instead of a published release.
        required: false
        default: true

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  NX_FORCE_ALL: ${{ fromJSON('["", "--all"]')[ inputs.nx-force-all ] }}  # This relies on type coercion, an implicit cast from boolean true to 1 or false to 0, which is then used as array index.
  
jobs:
  check-version:
    name: Check version syntax
    runs-on: ubuntu-20.04
    steps:
      - name: Check version is SemVer
        run: |
          if ! [[ "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "Invalid version '${{ github.event.inputs.version }}'."
            echo "Version must be a valid semver version."
            echo "See https://semver.org/ for more details."
            exit 1
          fi
        shell: bash


  generate-release:
    name: Create a release for amplication platform
    runs-on: ubuntu-20.04
    needs: check-version
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PRODUCTION_PAT }}

      - name: Determine previous tag
        run: |
          PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -v ^dsg/ | grep -A 1 ^${{ github.ref_name }} | tail -n 1)
          echo "🏷️ PREVIOUS_TAG=$PREVIOUS_TAG (used to detect the affected projects)"

          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
        id: base

      - name: Check version is unique
        id: validate-version-unique
        run: |
          if git tag --list | grep -q "^${{ github.event.inputs.version }}"; then
            echo "Version '${{ github.event.inputs.version }}' already exists."
            echo "Please use a different version."
            exit 1
          fi
        shell: bash

      - uses: actions/setup-node@v3
        with:
          node-version-file: 'package.json'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Cache global node modules
        id: cache-node-modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: npm ci
        
      - name: Update apps version.ts
        id: update-version-ts
        run: |
          VERSION=${{ github.event.inputs.version }}
          APP_VERSION=${VERSION:1}
          npx nx affected --target=update-version --base=$PREVIOUS_TAG $NX_FORCE_ALL --args="--version=$APP_VERSION"

      # Commit all changed files back to the repository
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        continue-on-error:  ${{ github.event.inputs.re-run }}
        with:
          commit_message: "chore: update apps version.ts"
          branch: ${{ github.event.repository.default_branch }}
          commit_user_name: amplication-engineering
          commit_user_email: engineering@amplication.com
          commit_author: amplication-engineering <engineering@amplication.com> # defaults to author of the commit that triggered the run
          tagging_message: ${{ github.event.inputs.version }}

      - name: "Build amplication Changelog"
        id: changelog
        uses: mikepenz/release-changelog-builder-action@{latest-release}
        with:
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
              "ignore_labels": [
                "ignore-for-release"
              ],"categories": [
                {
                    "title": "## [ `amplication platform` ] Changes 👾",
                    "labels": ["*"],
                    "exclude_labels": ["data-service-generator"],
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Release amplication
        id: release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.event.inputs.version }}
          tag_name: ${{ github.event.inputs.version }}
          draft: ${{ github.event.inputs.draft-release }} 
          body: ${{ steps.changelog.outputs.changelog }}

  generate-dsg-release:
    name: Create a release for data-service-generator
    runs-on: ubuntu-20.04
    needs: check-version
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PRODUCTION_PAT }}
      
      - name: Determine previous tag
        run: |
          DSG_VERSION=$(cat $DSG_PACKAGE_JSON  | jq -r '.version')
          NEW_TAG="dsg/v$DSG_VERSION"
          echo "🏷️ NEW_TAG=$PREVIOUS_TAG (based on $DSG_PACKAGE_JSON DSG_VERSION=$DSG_VERSION)"

          PREVIOUS_TAG=$(git tag --sort=-v:refname | grep -A 1 ^$NEW_TAG | tail -n 1)
          echo "🏷️ PREVIOUS_TAG=$PREVIOUS_TAG"

          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        id: base
        env:
          DSG_PACKAGE_JSON: packages/data-service-generator/package.json

      - name: Check data-service-generator is affected
        id: validate-dsg-affected
        run: |
          if [[ $(npx nx print-affected --type=app --base=$PREVIOUS_TAG | jq -c .projects) == *"data-service-generator"* ]]; then
            echo "dsg-affected=true" >> $GITHUB_OUTPUT
          else
            echo "dsg-affected=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: "Build data-service-generator Changelog"
        id: changelog
        if: ${{ steps.validate-dsg-affected.outputs.dsg-affected == 'true' }}
        uses: mikepenz/release-changelog-builder-action@{latest-release}
        with:
          configurationJson: |
            {
              "ignore_labels": [
                "ignore-for-release"
              ],"categories": [
                {
                    "title": "## [`data-service-generator`] Changes 🛠",
                    "labels": ["data-service-generator"],
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release data-service-generator
        id: release
        if: ${{ steps.validate-dsg-affected.outputs.dsg-affected == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          name: "(`data-service-generator`) ${{ github.event.inputs.version }}"
          tag_name: ${{ github.event.inputs.version }}
          draft: ${{ github.event.inputs.draft-release }} 
          body: ${{ steps.changelog.outputs.changelog }}

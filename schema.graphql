# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  createdAt: DateTime!
  description: String
  icon: String
  id: String!
  name: String!
  rank: Float
  updatedAt: DateTime!
}

input CategoryCreateInput {
  description: String
  icon: String
  name: String!
  rank: Float
}

input CategoryOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  icon: SortOrder
  id: SortOrder
  name: SortOrder
  rank: SortOrder
  updatedAt: SortOrder
}

input CategoryUpdateInput {
  description: String
  icon: String
  name: String
  rank: Float
}

input CategoryWhereInput {
  id: StringFilter
  name: StringFilter
  rank: IntNullableFilter
}

input CategoryWhereUniqueInput {
  id: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input JsonFilter {
  equals: JSONObject
  not: JSONObject
}

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  createPlugin(data: PluginCreateInput!): Plugin!
  createPluginVersion(data: PluginVersionCreateInput!): PluginVersion!
  deleteCategory(where: CategoryWhereUniqueInput!): Category!
  deletePlugin(where: PluginWhereUniqueInput!): Plugin!
  deletePluginVersion(where: PluginVersionWhereUniqueInput!): PluginVersion!
  processPluginCatalog: [Plugin!]
  updateCategory(
    data: CategoryUpdateInput!
    where: CategoryWhereUniqueInput!
  ): Category!
  updatePlugin(
    data: PluginUpdateInput!
    where: PluginWhereUniqueInput!
  ): Plugin!
  updatePluginVersion(
    data: PluginVersionUpdateInput!
    where: PluginVersionWhereUniqueInput!
  ): PluginVersion!
}

type Plugin {
  categories: JSON!
  createdAt: DateTime!
  description: String
  downloads: Int
  github: String
  icon: String
  id: String!
  name: String
  npm: String
  pluginId: String
  taggedVersions: JSON
  updatedAt: DateTime!
  versions(
    orderBy: [PluginVersionOrderByInput!]
    skip: Float
    take: Float
    where: PluginVersionWhereInput
  ): [PluginVersion!]
  website: String
}

input PluginCreateInput {
  categories: JSON!
  description: String
  downloads: Float
  github: String
  icon: String
  name: String
  npm: String
  pluginId: String
  taggedVersions: JSON
  website: String
}

input PluginOrderByInput {
  categories: SortOrder!
  createdAt: SortOrder
  description: SortOrder
  downloads: SortOrder
  github: SortOrder
  icon: SortOrder
  id: SortOrder
  name: SortOrder
  npm: SortOrder
  pluginId: SortOrder
  taggedVersions: SortOrder
  updatedAt: SortOrder
  website: SortOrder
}

input PluginUpdateInput {
  categories: JSON!
  description: String
  downloads: Float
  github: String
  icon: String
  name: String
  npm: String
  pluginId: String
  taggedVersions: JSON
  website: String
}

type PluginVersion {
  configurations: JSON
  createdAt: DateTime!
  deprecated: String
  id: String!
  isLatest: Boolean
  pluginId: String
  pluginIdVersion: String!
  settings: JSON
  updatedAt: DateTime!
  version: String
}

input PluginVersionCreateInput {
  configurations: JSON
  deprecated: String
  isLatest: Boolean
  pluginId: String
  pluginIdVersion: String!
  settings: JSON
  version: String
}

input PluginVersionOrderByInput {
  configurations: SortOrder
  createdAt: SortOrder
  deprecated: SortOrder
  id: SortOrder
  isLatest: SortOrder
  pluginId: SortOrder
  pluginIdVersion: SortOrder
  settings: SortOrder
  updatedAt: SortOrder
  version: SortOrder
}

input PluginVersionUpdateInput {
  configurations: JSON
  deprecated: String
  isLatest: Boolean
  pluginId: String
  pluginIdVersion: String
  settings: JSON
  version: String
}

input PluginVersionWhereInput {
  configurations: JsonFilter
  deprecated: StringNullableFilter
  id: StringFilter
  pluginId: StringNullableFilter
  pluginIdVersion: StringFilter
  settings: JsonFilter
  version: StringNullableFilter
}

input PluginVersionWhereUniqueInput {
  id: String!
}

input PluginWhereInput {
  categories: JsonFilter!
  description: StringNullableFilter
  downloads: IntNullableFilter
  github: StringNullableFilter
  icon: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  npm: StringNullableFilter
  pluginId: StringNullableFilter
  taggedVersions: JsonFilter
  website: StringNullableFilter
}

input PluginWhereUniqueInput {
  id: String!
}

type Query {
  categories(
    orderBy: [CategoryOrderByInput!]
    skip: Float
    take: Float
    where: CategoryWhereInput
  ): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  plugin(where: PluginWhereUniqueInput!): Plugin
  pluginVersion(where: PluginVersionWhereUniqueInput!): PluginVersion
  pluginVersions(
    orderBy: [PluginVersionOrderByInput!]
    skip: Float
    take: Float
    where: PluginVersionWhereInput
  ): [PluginVersion!]!
  plugins(
    orderBy: [PluginOrderByInput!]
    skip: Float
    take: Float
    where: PluginWhereInput
  ): [Plugin!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

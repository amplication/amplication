/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Public } from "../../decorators/public.decorator";
import { CreatePluginArgs } from "./CreatePluginArgs";
import { UpdatePluginArgs } from "./UpdatePluginArgs";
import { DeletePluginArgs } from "./DeletePluginArgs";
import { PluginCountArgs } from "./PluginCountArgs";
import { PluginFindManyArgs } from "./PluginFindManyArgs";
import { PluginFindUniqueArgs } from "./PluginFindUniqueArgs";
import { Plugin } from "./Plugin";
import { PluginService } from "../plugin.service";
@graphql.Resolver(() => Plugin)
export class PluginResolverBase {
  constructor(protected readonly service: PluginService) {}

  async _pluginsMeta(
    @graphql.Args() args: PluginCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @Public()
  @graphql.Query(() => [Plugin])
  async plugins(@graphql.Args() args: PluginFindManyArgs): Promise<Plugin[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => Plugin, { nullable: true })
  async plugin(
    @graphql.Args() args: PluginFindUniqueArgs
  ): Promise<Plugin | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Plugin)
  async createPlugin(@graphql.Args() args: CreatePluginArgs): Promise<Plugin> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Plugin)
  async updatePlugin(
    @graphql.Args() args: UpdatePluginArgs
  ): Promise<Plugin | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Plugin)
  async deletePlugin(
    @graphql.Args() args: DeletePluginArgs
  ): Promise<Plugin | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Template as PrismaTemplate,
  ConversationType as PrismaConversationType,
  Message as PrismaMessage,
  Model as PrismaModel,
} from "@prisma/client";

export class TemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TemplateCountArgs, "select">): Promise<number> {
    return this.prisma.template.count(args);
  }

  async templates(
    args: Prisma.TemplateFindManyArgs
  ): Promise<PrismaTemplate[]> {
    return this.prisma.template.findMany(args);
  }
  async template(
    args: Prisma.TemplateFindUniqueArgs
  ): Promise<PrismaTemplate | null> {
    return this.prisma.template.findUnique(args);
  }
  async createTemplate(
    args: Prisma.TemplateCreateArgs
  ): Promise<PrismaTemplate> {
    return this.prisma.template.create(args);
  }
  async updateTemplate(
    args: Prisma.TemplateUpdateArgs
  ): Promise<PrismaTemplate> {
    return this.prisma.template.update(args);
  }
  async deleteTemplate(
    args: Prisma.TemplateDeleteArgs
  ): Promise<PrismaTemplate> {
    return this.prisma.template.delete(args);
  }

  async findMessageTypes(
    parentId: string,
    args: Prisma.ConversationTypeFindManyArgs
  ): Promise<PrismaConversationType[]> {
    return this.prisma.template
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messageTypes(args);
  }

  async findMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.template
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messages(args);
  }

  async getModel(parentId: string): Promise<PrismaModel | null> {
    return this.prisma.template
      .findUnique({
        where: { id: parentId },
      })
      .model();
  }
}

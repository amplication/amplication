/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Model as PrismaModel,
  Template as PrismaTemplate,
} from "@prisma/client";

export class ModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ModelCountArgs, "select">): Promise<number> {
    return this.prisma.model.count(args);
  }

  async models(args: Prisma.ModelFindManyArgs): Promise<PrismaModel[]> {
    return this.prisma.model.findMany(args);
  }
  async model(args: Prisma.ModelFindUniqueArgs): Promise<PrismaModel | null> {
    return this.prisma.model.findUnique(args);
  }
  async createModel(args: Prisma.ModelCreateArgs): Promise<PrismaModel> {
    return this.prisma.model.create(args);
  }
  async updateModel(args: Prisma.ModelUpdateArgs): Promise<PrismaModel> {
    return this.prisma.model.update(args);
  }
  async deleteModel(args: Prisma.ModelDeleteArgs): Promise<PrismaModel> {
    return this.prisma.model.delete(args);
  }

  async findTemplates(
    parentId: string,
    args: Prisma.TemplateFindManyArgs
  ): Promise<PrismaTemplate[]> {
    return this.prisma.model
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .templates(args);
  }
}

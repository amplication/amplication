/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ConversationType as PrismaConversationType,
  Template as PrismaTemplate,
} from "@prisma/client";

export class ConversationTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversationTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversationType.count(args);
  }

  async conversationTypes(
    args: Prisma.ConversationTypeFindManyArgs
  ): Promise<PrismaConversationType[]> {
    return this.prisma.conversationType.findMany(args);
  }
  async conversationType(
    args: Prisma.ConversationTypeFindUniqueArgs
  ): Promise<PrismaConversationType | null> {
    return this.prisma.conversationType.findUnique(args);
  }
  async createConversationType(
    args: Prisma.ConversationTypeCreateArgs
  ): Promise<PrismaConversationType> {
    return this.prisma.conversationType.create(args);
  }
  async updateConversationType(
    args: Prisma.ConversationTypeUpdateArgs
  ): Promise<PrismaConversationType> {
    return this.prisma.conversationType.update(args);
  }
  async deleteConversationType(
    args: Prisma.ConversationTypeDeleteArgs
  ): Promise<PrismaConversationType> {
    return this.prisma.conversationType.delete(args);
  }

  async getTemplate(parentId: string): Promise<PrismaTemplate | null> {
    return this.prisma.conversationType
      .findUnique({
        where: { id: parentId },
      })
      .template();
  }
}

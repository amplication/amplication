/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Generator as PrismaGenerator,
  Version as PrismaVersion,
} from "@prisma/client";

export class GeneratorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GeneratorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.generator.count(args);
  }

  async generators(
    args: Prisma.GeneratorFindManyArgs
  ): Promise<PrismaGenerator[]> {
    return this.prisma.generator.findMany(args);
  }
  async generator(
    args: Prisma.GeneratorFindUniqueArgs
  ): Promise<PrismaGenerator | null> {
    return this.prisma.generator.findUnique(args);
  }
  async createGenerator(
    args: Prisma.GeneratorCreateArgs
  ): Promise<PrismaGenerator> {
    return this.prisma.generator.create(args);
  }
  async updateGenerator(
    args: Prisma.GeneratorUpdateArgs
  ): Promise<PrismaGenerator> {
    return this.prisma.generator.update(args);
  }
  async deleteGenerator(
    args: Prisma.GeneratorDeleteArgs
  ): Promise<PrismaGenerator> {
    return this.prisma.generator.delete(args);
  }

  async findVersion(
    parentId: string,
    args: Prisma.VersionFindManyArgs
  ): Promise<PrismaVersion[]> {
    return this.prisma.generator
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .version(args);
  }
}

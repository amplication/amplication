/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Version as PrismaVersion,
  Generator as PrismaGenerator,
} from "@prisma/client";

export class VersionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VersionCountArgs, "select">): Promise<number> {
    return this.prisma.version.count(args);
  }

  async versions(args: Prisma.VersionFindManyArgs): Promise<PrismaVersion[]> {
    return this.prisma.version.findMany(args);
  }
  async version(
    args: Prisma.VersionFindUniqueArgs
  ): Promise<PrismaVersion | null> {
    return this.prisma.version.findUnique(args);
  }
  async createVersion(args: Prisma.VersionCreateArgs): Promise<PrismaVersion> {
    return this.prisma.version.create(args);
  }
  async updateVersion(args: Prisma.VersionUpdateArgs): Promise<PrismaVersion> {
    return this.prisma.version.update(args);
  }
  async deleteVersion(args: Prisma.VersionDeleteArgs): Promise<PrismaVersion> {
    return this.prisma.version.delete(args);
  }

  async getGenerator(parentId: string): Promise<PrismaGenerator | null> {
    return this.prisma.version
      .findUnique({
        where: { id: parentId },
      })
      .generator();
  }
}

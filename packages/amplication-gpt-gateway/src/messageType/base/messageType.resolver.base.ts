/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMessageTypeArgs } from "./CreateMessageTypeArgs";
import { UpdateMessageTypeArgs } from "./UpdateMessageTypeArgs";
import { DeleteMessageTypeArgs } from "./DeleteMessageTypeArgs";
import { MessageTypeCountArgs } from "./MessageTypeCountArgs";
import { MessageTypeFindManyArgs } from "./MessageTypeFindManyArgs";
import { MessageTypeFindUniqueArgs } from "./MessageTypeFindUniqueArgs";
import { MessageType } from "./MessageType";
import { Template } from "../../template/base/Template";
import { MessageTypeService } from "../messageType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MessageType)
export class MessageTypeResolverBase {
  constructor(
    protected readonly service: MessageTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MessageType",
    action: "read",
    possession: "any",
  })
  async _messageTypesMeta(
    @graphql.Args() args: MessageTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MessageType])
  @nestAccessControl.UseRoles({
    resource: "MessageType",
    action: "read",
    possession: "any",
  })
  async messageTypes(
    @graphql.Args() args: MessageTypeFindManyArgs
  ): Promise<MessageType[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MessageType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MessageType",
    action: "read",
    possession: "own",
  })
  async messageType(
    @graphql.Args() args: MessageTypeFindUniqueArgs
  ): Promise<MessageType | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MessageType)
  @nestAccessControl.UseRoles({
    resource: "MessageType",
    action: "create",
    possession: "any",
  })
  async createMessageType(
    @graphql.Args() args: CreateMessageTypeArgs
  ): Promise<MessageType> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        template: args.data.template
          ? {
              connect: args.data.template,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MessageType)
  @nestAccessControl.UseRoles({
    resource: "MessageType",
    action: "update",
    possession: "any",
  })
  async updateMessageType(
    @graphql.Args() args: UpdateMessageTypeArgs
  ): Promise<MessageType | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          template: args.data.template
            ? {
                connect: args.data.template,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MessageType)
  @nestAccessControl.UseRoles({
    resource: "MessageType",
    action: "delete",
    possession: "any",
  })
  async deleteMessageType(
    @graphql.Args() args: DeleteMessageTypeArgs
  ): Promise<MessageType | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Template, {
    nullable: true,
    name: "template",
  })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  async resolveFieldTemplate(
    @graphql.Parent() parent: MessageType
  ): Promise<Template | null> {
    const result = await this.service.getTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

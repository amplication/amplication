# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------
type Account {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type App {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  entities: [Entity!]!
}

input AppCreateInput {
  name: String!
  description: String!
}

input AppOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
  description: OrderByArg
}

type AppRole {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  displayName: String!
  description: String
}

input AppRoleCreateInput {
  name: String!
  description: String!
  displayName: String!
  app: WhereParentIdInput!
}

input AppRoleOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
  displayName: OrderByArg
  description: OrderByArg
}

input AppRoleUpdateInput {
  name: String
  description: String
  displayName: String!
}

input AppRoleWhereInput {
  id: String
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  displayName: StringFilter
  description: StringFilter
  app: WhereUniqueInput
}

input AppUpdateInput {
  name: String
  description: String
}

input AppWhereInput {
  id: String
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  description: StringFilter
}

type Auth {
  """JWT Bearer token"""
  token: String!
  account: Account!
}

type Block {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  app: App
  parentBlock: Block
  displayName: String!
  description: String!
  blockType: EnumBlockType!
  versionNumber: Float
}

type BlockInputOutput {
  name: String!
  description: String!
  dataType: EnumDataType
  dataTypeEntityName: String
  isList: Boolean
  includeAllPropertiesByDefault: Boolean
  propertyList: [PropertySelector!]
}

input BlockInputOutputInput {
  name: String!
  description: String!
  dataType: EnumDataType
  dataTypeEntityName: String
  isList: Boolean
  includeAllPropertiesByDefault: Boolean
  propertyList: [PropertySelectorInput!]
}

input BlockOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  blockType: OrderByArg
  displayName: OrderByArg
  description: OrderByArg
}

input BlockUpdateInput {
  displayName: String
  description: String
}

type BlockVersion {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  block: Block!
  versionNumber: Int!
  label: String!
}

input BlockVersionCreateInput {
  label: String!
  block: WhereParentIdInput!
}

input BlockVersionOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  versionNumber: OrderByArg
  label: OrderByArg
}

input BlockVersionWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  versionNumber: IntFilter
  label: StringFilter
  block: WhereUniqueInput
}

input BlockWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  app: WhereUniqueInput
  parentBlock: WhereUniqueInput
  blockType: EnumBlockTypeFilter
  displayName: StringFilter
  description: StringFilter
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

type Commit {
  id: String!
  createdAt: DateTime!
  userId: String!
  message: String!
}

input CommitCreateInput {
  message: String!
  app: WhereParentIdInput!
}

type ConnectorRestApi implements IBlock {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parentBlock: Block
  displayName: String!
  description: String!
  blockType: EnumBlockType!
  versionNumber: Float!
  inputParameters: [BlockInputOutput!]!
  outputParameters: [BlockInputOutput!]!
  authenticationType: EnumConnectorRestApiAuthenticationType!
  privateKeyAuthenticationSettings: PrivateKeyAuthenticationSettings
  httpBasicAuthenticationSettings: HttpBasicAuthenticationSettings
}

type ConnectorRestApiCall implements IBlock {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parentBlock: Block
  displayName: String!
  description: String!
  blockType: EnumBlockType!
  versionNumber: Float!
  inputParameters: [BlockInputOutput!]!
  outputParameters: [BlockInputOutput!]!
  url: String!
}

input ConnectorRestApiCallCreateInput {
  displayName: String!
  description: String
  app: WhereParentIdInput!
  parentBlock: WhereParentIdInput
  inputParameters: [BlockInputOutputInput!]
  outputParameters: [BlockInputOutputInput!]
  url: String!
}

input ConnectorRestApiCallOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  blockType: OrderByArg
  displayName: OrderByArg
  description: OrderByArg
}

input ConnectorRestApiCallWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  app: WhereUniqueInput
  parentBlock: WhereUniqueInput
  displayName: StringFilter
  description: StringFilter
}

input ConnectorRestApiCreateInput {
  displayName: String!
  description: String
  app: WhereParentIdInput!
  parentBlock: WhereParentIdInput
  inputParameters: [BlockInputOutputInput!]
  outputParameters: [BlockInputOutputInput!]
  authenticationType: EnumConnectorRestApiAuthenticationType!
  privateKeyAuthenticationSettings: PrivateKeyAuthenticationSettingsInput
  httpBasicAuthenticationSettings: HttpBasicAuthenticationSettingsInput
}

input ConnectorRestApiOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  blockType: OrderByArg
  displayName: OrderByArg
  description: OrderByArg
}

input ConnectorRestApiWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  app: WhereUniqueInput
  parentBlock: WhereUniqueInput
  displayName: StringFilter
  description: StringFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  not: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

type Entity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  displayName: String!
  pluralDisplayName: String!
  description: String
  isPersistent: Boolean!
  allowFeedback: Boolean!
  primaryField: String
  fields: [EntityField!]!
  versionNumber: Float
  lockedByUserId: String
  lockedAt: DateTime
}

input EntityCreateInput {
  name: String!
  displayName: String!
  pluralDisplayName: String!
  description: String
  isPersistent: Boolean!
  allowFeedback: Boolean!
  primaryField: String
  app: WhereParentIdInput!
}

type EntityField {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  displayName: String!
  dataType: EnumDataType!
  properties: JSONObject
  required: Boolean!
  searchable: Boolean!
  description: String!
}

input EntityFieldCreateInput {
  name: String!
  displayName: String!
  dataType: EnumDataType!
  properties: JSONObject!
  required: Boolean!
  searchable: Boolean!
  description: String!
  entity: WhereParentIdInput!
}

input EntityFieldFilter {
  every: EntityFieldWhereInput
  some: EntityFieldWhereInput
  none: EntityFieldWhereInput
}

input EntityFieldUpdateInput {
  name: String
  displayName: String
  dataType: EnumDataType
  properties: JSONObject
  required: Boolean
  searchable: Boolean
  description: String
}

input EntityFieldWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  displayName: StringFilter
  dataType: EnumDataTypeFilter
  properties: StringFilter
  required: BooleanFilter
  searchable: BooleanFilter
  description: StringFilter
  AND: [EntityFieldWhereInput!]
  OR: [EntityFieldWhereInput!]
  NOT: [EntityFieldWhereInput!]
  entity: EntityWhereInput
}

input EntityOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
  displayName: OrderByArg
  pluralDisplayName: OrderByArg
  description: OrderByArg
  isPersistent: OrderByArg
  allowFeedback: OrderByArg
  primaryField: OrderByArg
}

type EntityPage implements IBlock {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parentBlock: Block
  displayName: String!
  description: String!
  blockType: EnumBlockType!
  versionNumber: Float!
  inputParameters: [BlockInputOutput!]!
  outputParameters: [BlockInputOutput!]!
  entityId: String!
  pageType: EnumEntityPageType!
  singleRecordSettings: EntityPageSingleRecordSettings
  listSettings: EntityPageListSettings
  showAllFields: Boolean!
  showFieldList: [String!]
}

input EntityPageCreateInput {
  displayName: String!
  description: String
  app: WhereParentIdInput!
  parentBlock: WhereParentIdInput
  inputParameters: [BlockInputOutputInput!]
  outputParameters: [BlockInputOutputInput!]
  entityId: String!
  pageType: EnumEntityPageType!
  singleRecordSettings: EntityPageSingleRecordSettingsInput
  listSettings: EntityPageListSettingsInput
  showAllFields: Boolean!
  showFieldList: [String!]
}

type EntityPageListSettings implements IEntityPageSettings {
  allowCreation: Boolean!
  allowDeletion: Boolean!
  enableSearch: Boolean!
  navigateToPageId: String
}

input EntityPageListSettingsInput {
  allowCreation: Boolean!
  allowDeletion: Boolean!
  enableSearch: Boolean!
  navigateToPageId: String
}

input EntityPageOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  blockType: OrderByArg
  displayName: OrderByArg
  description: OrderByArg
}

type EntityPageSingleRecordSettings implements IEntityPageSettings {
  allowCreation: Boolean!
  allowDeletion: Boolean!
  allowUpdate: Boolean!
}

input EntityPageSingleRecordSettingsInput {
  allowCreation: Boolean!
  allowDeletion: Boolean!
  allowUpdate: Boolean!
}

input EntityPageUpdateInput {
  displayName: String
  description: String
  entityId: String!
  pageType: EnumEntityPageType!
  singleRecordSettings: EntityPageSingleRecordSettingsInput
  listSettings: EntityPageListSettingsInput
  showAllFields: Boolean!
  showFieldList: [String!]
}

input EntityPageWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  app: WhereUniqueInput
  parentBlock: WhereUniqueInput
  displayName: StringFilter
  description: StringFilter
}

type EntityPermission {
  action: EnumEntityAction!
  appRole: AppRole!
}

input EntityPermissionWhereUniqueInput {
  action: EnumEntityAction!
  appRoleId: String!
}

input EntityUpdateInput {
  name: String
  displayName: String
  pluralDisplayName: String
  description: String
  isPersistent: Boolean
  allowFeedback: Boolean
  primaryField: String
}

input EntityUpdatePermissionsInput {
  remove: [EntityPermissionWhereUniqueInput!]
  add: [EntityPermissionWhereUniqueInput!]
}

type EntityVersion {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  versionNumber: Int!
  commit: Commit!
}

input EntityVersionOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  versionNumber: OrderByArg
  label: OrderByArg
}

input EntityVersionWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  versionNumber: IntFilter
  label: StringFilter
  entity: WhereUniqueInput
}

input EntityWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  displayName: StringFilter
  pluralDisplayName: StringFilter
  description: StringFilter
  isPersistent: BooleanFilter
  allowFeedback: BooleanFilter
  primaryField: StringFilter
  fields: EntityFieldFilter
  app: WhereUniqueInput
}

enum EnumBlockType {
  AppSettings
  Flow
  ConnectorRestApi
  ConnectorRestApiCall
  ConnectorSoapApi
  ConnectorFile
  EntityApi
  EntityApiEndpoint
  FlowApi
  Layout
  CanvasPage
  EntityPage
  Document
}

input EnumBlockTypeFilter {
  equals: EnumBlockType
  not: EnumBlockType
  in: [EnumBlockType!]
  notIn: [EnumBlockType!]
}

enum EnumConnectorRestApiAuthenticationType {
  None
  PrivateKey
  HttpBasicAuthentication
  OAuth2PasswordFlow
  OAuth2UserAgentFlow
}

enum EnumDataType {
  singleLineText
  multiLineText
  email
  state
  autoNumber
  wholeNumber
  dateTime
  decimalNumber
  file
  image
  lookup
  multiSelectOptionSet
  optionSet
  twoOptions
  boolean
  uniqueId
  geographicAddress
}

input EnumDataTypeFilter {
  equals: EnumDataType
  not: EnumDataType
  in: [EnumDataType!]
  notIn: [EnumDataType!]
}

enum EnumEntityAction {
  View
  Create
  Update
  Delete
  Search
}

enum EnumEntityPageType {
  SingleRecord
  List
  MasterDetails
}

type HttpBasicAuthenticationSettings {
  username: String!
  password: String!
}

input HttpBasicAuthenticationSettingsInput {
  username: String!
  password: String!
}

interface IBlock {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parentBlock: Block
  displayName: String!
  description: String!
  blockType: EnumBlockType!
  versionNumber: Float!
  inputParameters: [BlockInputOutput!]!
  outputParameters: [BlockInputOutput!]!
}

interface IEntityPageSettings {
  allowCreation: Boolean!
  allowDeletion: Boolean!
}

input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

input InviteUserInput {
  email: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  updateAccount(data: UpdateAccountInput!): Account!
  createApp(data: AppCreateInput!): App!
  deleteApp(where: WhereUniqueInput!): App
  updateApp(data: AppUpdateInput!, where: WhereUniqueInput!): App
  commit(data: CommitCreateInput!): Commit
  createAppRole(data: AppRoleCreateInput!): AppRole!
  deleteAppRole(where: WhereUniqueInput!): AppRole
  updateAppRole(data: AppRoleUpdateInput!, where: WhereUniqueInput!): AppRole
  signup(data: SignupInput!): Auth!
  login(data: LoginInput!): Auth!
  changePassword(data: ChangePasswordInput!): Account!
  setCurrentOrganization(data: WhereUniqueInput!): Auth!
  createBlockVersion(data: BlockVersionCreateInput!): Block!
  createConnectorRestApi(data: ConnectorRestApiCreateInput!): ConnectorRestApi!
  updateConnectorRestApi(data: BlockUpdateInput!, where: WhereUniqueInput!): ConnectorRestApi!
  createOneEntity(data: EntityCreateInput!): Entity!
  deleteEntity(where: WhereUniqueInput!): Entity
  updateEntity(data: EntityUpdateInput!, where: WhereUniqueInput!): Entity
  lockEntity(where: WhereUniqueInput!): Entity
  updateEntityPermissions(data: EntityUpdatePermissionsInput!, where: WhereUniqueInput!): [EntityPermission!]
  createConnectorRestApiCall(data: ConnectorRestApiCallCreateInput!): ConnectorRestApiCall!
  updateConnectorRestApiCall(data: BlockUpdateInput!, where: WhereUniqueInput!): ConnectorRestApiCall!
  createEntityField(data: EntityFieldCreateInput!): EntityField
  deleteEntityField(where: WhereUniqueInput!): EntityField
  updateEntityField(data: EntityFieldUpdateInput!, where: WhereUniqueInput!): EntityField
  createEntityPage(data: EntityPageCreateInput!): EntityPage!
  updateEntityPage(data: EntityPageUpdateInput!, where: WhereUniqueInput!): EntityPage!
  deleteOrganization(where: WhereUniqueInput!): Organization
  updateOrganization(data: OrganizationUpdateInput!, where: WhereUniqueInput!): Organization
  inviteUser(data: InviteUserInput!): User
  assignRoleToUser(data: UserRoleInput!, where: WhereUniqueInput!): User
  removeRoleFromUser(data: UserRoleInput!, where: WhereUniqueInput!): User
}

enum OrderByArg {
  asc
  desc
}

type Organization {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  defaultTimeZone: String!
  address: String!
  apps: [App!]!
  users: [User!]!
}

input OrganizationOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  name: OrderByArg
  defaultTimeZone: OrderByArg
  address: OrderByArg
}

input OrganizationUpdateInput {
  name: String
  defaultTimeZone: String
  address: String
}

input OrganizationWhereInput {
  id: String
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  defaultTimeZone: StringFilter
  address: StringFilter
}

type PrivateKeyAuthenticationSettings {
  keyName: String!
  keyValue: String!
  type: String!
}

input PrivateKeyAuthenticationSettingsInput {
  keyName: String!
  keyValue: String!
  type: String!
}

type PropertySelector {
  propertyName: String!
  include: Boolean!
}

input PropertySelectorInput {
  propertyName: String!
  include: Boolean!
}

type Query {
  me: User!
  app(where: WhereUniqueInput!): App
  apps(where: AppWhereInput, orderBy: AppOrderByInput, skip: Int, take: Int): [App!]!
  appRole(where: WhereUniqueInput!, version: Float): AppRole
  appRoles(where: AppRoleWhereInput, orderBy: AppRoleOrderByInput, skip: Int, take: Int): [AppRole!]!
  blockVersions(where: BlockVersionWhereInput, orderBy: BlockVersionOrderByInput, skip: Int, take: Int): [BlockVersion!]!
  blocks(where: BlockWhereInput, orderBy: BlockOrderByInput, skip: Int, take: Int): [Block!]!
  ConnectorRestApi(where: WhereUniqueInput!, version: Float): ConnectorRestApi
  ConnectorRestApis(where: ConnectorRestApiWhereInput, orderBy: ConnectorRestApiOrderByInput, skip: Int, take: Int): [ConnectorRestApi!]!
  entity(where: WhereUniqueInput!, version: Float): Entity
  entities(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, take: Int): [Entity!]!
  entityVersions(where: EntityVersionWhereInput, orderBy: EntityVersionOrderByInput, skip: Int, take: Int): [EntityVersion!]!
  ConnectorRestApiCall(where: WhereUniqueInput!, version: Float): ConnectorRestApiCall
  ConnectorRestApiCalls(where: ConnectorRestApiCallWhereInput, orderBy: ConnectorRestApiCallOrderByInput, skip: Int, take: Int): [ConnectorRestApiCall!]!
  entityField(where: WhereUniqueInput!): EntityField
  EntityPage(where: WhereUniqueInput!, version: Float): EntityPage
  EntityPages(where: EntityPageWhereInput, orderBy: EntityPageOrderByInput, skip: Int, take: Int): [EntityPage!]!
  Organization(where: WhereUniqueInput!): Organization
  Organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, take: Int): [Organization!]!
  user(where: WhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, take: Int): [User!]!
}

enum Role {
  ADMIN
  USER
  ORGANIZATION_ADMIN
  PROJECT_ADMIN
}

input SignupInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  organizationName: String!
  defaultTimeZone: String!
  address: String!
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

input UpdateAccountInput {
  firstName: String
  lastName: String
}

type User {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  account: Account
  organization: Organization
  userRoles: [UserRole!]
}

input UserOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
}

type UserRole {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role!
}

input UserRoleInput {
  role: Role!
}

input UserWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  organization: OrganizationWhereInput
}

input WhereParentIdInput {
  connect: WhereUniqueInput!
}

input WhereUniqueInput {
  id: String!
}

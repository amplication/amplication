# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  createdAt: DateTime!
  email: String!
  firstName: String!
  githubId: String
  id: String!
  lastName: String!
  password: String!
  updatedAt: DateTime!
}

type Action {
  createdAt: DateTime!
  id: String!
  steps: [ActionStep!]
}

type ActionLog {
  createdAt: DateTime!
  id: String!
  level: EnumActionLogLevel!
  message: String!
  meta: JSONObject!
}

type ActionStep {
  completedAt: DateTime
  createdAt: DateTime!
  id: String!
  logs: [ActionLog!]
  message: String!
  name: String!
  status: EnumActionStepStatus!
}

input AddMemberToTeamsInput {
  teamIds: [String!]!
}

type AdminUISettings {
  adminUIPath: String!
  generateAdminUI: Boolean!
}

input AdminUISettingsUpdateInput {
  adminUIPath: String
  generateAdminUI: Boolean
}

type ApiToken {
  createdAt: DateTime!
  id: String!
  lastAccessAt: DateTime!
  name: String!
  previewChars: String!
  token: String
  updatedAt: DateTime!
  userId: String!
}

input ApiTokenCreateInput {
  name: String!
}

input AssistantContext {
  projectId: String
  resourceId: String
}

type AssistantMessage {
  createdAt: String!
  id: String!
  role: EnumAssistantMessageRole!
  text: String!
}

type AssistantMessageDelta {
  completed: Boolean!
  functionExecuted: EnumAssistantFunctions
  id: String!
  snapshot: String!
  text: String!
  threadId: String!
}

type AssistantThread {
  createdAt: String!
  id: String!
  messages: [AssistantMessage!]
  updatedAt: String!
}

type Auth {
  """JWT Bearer token"""
  token: String!
}

type AuthorizeResourceWithGitResult {
  """"""
  url: String!
}

type Block {
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  id: String!
  lockedAt: DateTime
  lockedByUser: User!
  lockedByUserId: String
  parentBlock: Block
  resource: Resource
  updatedAt: DateTime!
  versionNumber: Float
  versions(orderBy: BlockVersionOrderByInput, skip: Int, take: Int, where: BlockVersionWhereInput): [BlockVersion!]
}

type BlockInputOutput {
  dataType: EnumDataType
  dataTypeEntityName: String
  description: String!
  includeAllPropertiesByDefault: Boolean
  isList: Boolean
  name: String!
  propertyList: [PropertySelector!]
}

input BlockInputOutputInput {
  dataType: EnumDataType
  dataTypeEntityName: String
  description: String!
  includeAllPropertiesByDefault: Boolean
  isList: Boolean
  name: String!
  propertyList: [PropertySelectorInput!]
}

input BlockOrderByInput {
  blockType: SortOrder
  createdAt: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type BlockVersion {
  block: Block!
  commit: Commit
  createdAt: DateTime!
  description: String
  displayName: String!
  id: String!
  settings: JSONObject
  updatedAt: DateTime!
  versionNumber: Int!
}

input BlockVersionOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  label: SortOrder
  updatedAt: SortOrder
  versionNumber: SortOrder
}

input BlockVersionWhereInput {
  block: WhereUniqueInput
  createdAt: DateTimeFilter
  id: StringFilter
  label: StringFilter
  updatedAt: DateTimeFilter
  versionNumber: IntFilter
}

input BlockWhereInput {
  blockType: EnumBlockTypeFilter
  createdAt: DateTimeFilter
  description: StringFilter
  displayName: StringFilter
  id: StringFilter
  parentBlock: WhereUniqueInput
  resource: ResourceWhereInput
  updatedAt: DateTimeFilter
}

type Blueprint {
  color: String
  createdAt: DateTime!
  description: String
  enabled: Boolean!
  id: String!
  key: String!
  name: String!
  properties: [CustomProperty!]
  relations: [BlueprintRelation!]
  updatedAt: DateTime!
}

input BlueprintCreateInput {
  name: String!
}

input BlueprintOrderByInput {
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
}

type BlueprintRelation {
  allowMultiple: Boolean!
  description: String
  key: String!
  name: String!
  relatedTo: String!
  required: Boolean!
}

input BlueprintRelationUpsertInput {
  allowMultiple: Boolean!
  description: String
  key: String!
  name: String!
  relatedTo: String!
  required: Boolean!
}

input BlueprintUpdateInput {
  color: String
  description: String
  enabled: Boolean
  key: String
  name: String
}

input BlueprintWhereInput {
  id: String
  key: StringFilter
  name: StringFilter
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type BreakServiceToMicroservicesData {
  microservices: [BreakServiceToMicroservicesItem!]!
}

type BreakServiceToMicroservicesItem {
  functionality: String!
  name: String!
  tables: [BreakServiceToMicroservicesItemEntities!]!
}

type BreakServiceToMicroservicesItemEntities {
  name: String!
  originalEntityId: String!
}

type BreakServiceToMicroservicesResult {
  """Prompt result with some data structure manipulation"""
  data: BreakServiceToMicroservicesData

  """The original resource ID"""
  originalResourceId: String!

  """The status of the user action"""
  status: EnumUserActionStatus!
}

type Build {
  action: Action
  actionId: String!
  archiveURI: String
  buildPlugins: [BuildPlugin!]!
  codeGeneratorVersion: String
  commit: Commit
  commitId: String!
  createdAt: DateTime!
  createdBy: User
  filesChanged: Float
  gitStatus: EnumBuildGitStatus!
  id: String!
  linesOfCodeAdded: Float
  linesOfCodeDeleted: Float
  message: String
  resource: Resource
  resourceId: String!
  status: EnumBuildStatus!
  userId: String!
  version: String!
}

input BuildOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  status: SortOrder
  userId: SortOrder
  version: SortOrder
}

type BuildPlugin {
  build: Build
  buildId: String!
  createdAt: DateTime!
  id: String!
  packageName: String!
  packageVersion: String!
  requestedFullPackageName: String!
}

input BuildWhereInput {
  commit: WhereUniqueInput
  createdAt: DateTimeFilter
  createdBy: WhereUniqueInput
  gitStatus: EnumBuildGitStatusFilter
  id: StringFilter
  message: StringFilter
  resource: WhereUniqueInput
  status: EnumBuildStatusFilter
  version: StringFilter
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CodeGeneratorVersionOptionsInput {
  codeGeneratorStrategy: CodeGeneratorVersionStrategy
  codeGeneratorVersion: String
}

enum CodeGeneratorVersionStrategy {
  LatestMajor
  LatestMinor
  Specific
}

input CodeGeneratorVersionUpdateInput {
  codeGeneratorVersionOptions: CodeGeneratorVersionOptionsInput!
}

type Commit {
  builds(orderBy: BuildOrderByInput, skip: Int, take: Int, where: BuildWhereInput): [Build!]
  changes: [PendingChange!]
  createdAt: DateTime!
  id: String!
  message: String!
  user: User
  userId: String!
}

input CommitCreateInput {
  """
  It will bypass the limitations of the plan (if any). It will only work for limitation that support commit bypass.
  """
  bypassLimitations: Boolean = false

  """
  The strategy to use when committing the changes. If not provided, the default strategy will be used.
  """
  commitStrategy: EnumCommitStrategy = All
  message: String!
  project: WhereParentIdInput!

  """
  The resources to commit, when strategy is "Specific". On other strategies, this field will be ignored.
  """
  resourceIds: [String!]
  resourceTypeGroup: EnumResourceTypeGroup!
  resourceVersions: [CommitResourceVersionCreateInput!]
}

input CommitOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
}

input CommitResourceVersionCreateInput {
  resourceId: String
  version: String
}

input CommitWhereInput {
  createdAt: DateTimeFilter
  id: StringFilter
  message: StringFilter
  project: WhereUniqueInput!
  resourceTypeGroup: EnumResourceTypeGroup!
  user: WhereUniqueInput
}

input CommitWhereUniqueInput {
  id: String!
}

input CompareResourceVersionsWhereInput {
  resource: WhereUniqueInput!
  sourceVersion: String!
  targetVersion: String!
}

input CompleteInvitationInput {
  token: String!
}

input ConnectGitRepositoryInput {
  gitOrganizationId: String!

  """
  Name of the git provider repository group. It is mandatory when GitOrganisation.useGroupingForRepositories is true
  """
  groupName: String
  isOverrideGitRepository: Boolean
  name: String!
  resourceId: String!
}

type Coupon {
  code: String!
  couponType: String
  durationMonths: Int!
  id: String!
  subscriptionPlan: EnumSubscriptionPlan!
}

input CreateEntitiesFromPredefinedSchemaInput {
  resource: WhereParentIdInput!
  schemaName: EnumSchemaNames!
}

input CreateGitRepositoryInput {
  gitOrganizationId: String!
  gitOrganizationType: EnumGitOrganizationType!
  gitProvider: EnumGitProvider!

  """
  Name of the git provider repository group. It is mandatory when GitOrganisation.useGroupingForRepositories is true
  """
  groupName: String
  isPublic: Boolean!
  name: String!
  resourceId: String
}

input CreateTeamAssignmentsInput {
  teamIds: [String!]!
}

input CreateTeamAssignmentsWhereInput {
  resourceId: String!
}

type CustomProperty {
  blueprint: String
  blueprintId: String
  createdAt: DateTime!
  description: String
  enabled: Boolean!
  id: String!
  key: String!
  name: String!
  options: [CustomPropertyOption!]
  required: Boolean!
  type: EnumCustomPropertyType!
  updatedAt: DateTime!
  validationMessage: String
  validationRule: String
}

input CustomPropertyCreateInput {
  blueprint: WhereParentIdInput
  name: String!
}

type CustomPropertyOption {
  color: String!
  value: String!
}

input CustomPropertyOptionCreateInput {
  customProperty: WhereParentIdInput!
  value: String
}

input CustomPropertyOptionUpdateInput {
  color: String!
  value: String!
}

input CustomPropertyOrderByInput {
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
}

input CustomPropertyUpdateInput {
  description: String
  enabled: Boolean
  key: String
  name: String
  required: Boolean
  type: EnumCustomPropertyType
  validationMessage: String
  validationRule: String
}

input CustomPropertyWhereInput {
  blueprint: BlueprintWhereInput
  blueprintId: String
  deletedAt: DateTimeFilter
  enabled: Boolean
  id: String
  name: StringFilter
}

input DBSchemaImportCreateInput {
  resource: WhereParentIdInput!
  userActionType: EnumUserActionType!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input DefaultEntitiesInput {
  resourceId: String!
}

type Entity {
  createdAt: DateTime!
  customAttributes: String
  description: String
  displayName: String!
  fields(orderBy: EntityFieldOrderByInput, skip: Int, take: Int, where: EntityFieldWhereInput): [EntityField!]
  id: String!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  name: String!
  permissions: [EntityPermission!]
  pluralDisplayName: String!
  resource: Resource
  resourceId: String!
  updatedAt: DateTime!
  versions(orderBy: EntityVersionOrderByInput, skip: Int, take: Int, where: EntityVersionWhereInput): [EntityVersion!]
}

input EntityAddPermissionFieldInput {
  action: EnumEntityAction!
  entity: WhereParentIdInput!
  fieldName: String!
}

input EntityCreateInput {
  customAttributes: String
  description: String
  displayName: String!

  """
  allow creating the id for the entity when using import prisma schema because we need it for the relation
  """
  id: String
  name: String!
  pluralDisplayName: String!
  resource: WhereParentIdInput!
}

type EntityField {
  createdAt: DateTime!
  customAttributes: String
  dataType: EnumDataType!
  description: String
  displayName: String!
  id: String!
  name: String!
  permanentId: String!
  position: Int
  properties: JSONObject
  required: Boolean!
  searchable: Boolean!
  unique: Boolean!
  updatedAt: DateTime!
}

input EntityFieldCreateByDisplayNameInput {
  dataType: EnumDataType
  displayName: String!
  entity: WhereParentIdInput!
}

input EntityFieldCreateInput {
  customAttributes: String
  dataType: EnumDataType!
  description: String!
  displayName: String!
  entity: WhereParentIdInput!
  name: String!
  position: Int
  properties: JSONObject!
  required: Boolean!
  searchable: Boolean!
  unique: Boolean!
}

input EntityFieldFilter {
  every: EntityFieldWhereInput
  none: EntityFieldWhereInput
  some: EntityFieldWhereInput
}

input EntityFieldOrderByInput {
  createdAt: SortOrder
  customAttributes: SortOrder
  dataType: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  name: SortOrder
  permanentId: SortOrder
  position: SortOrder
  required: SortOrder
  searchable: SortOrder
  unique: SortOrder
  updatedAt: SortOrder
}

input EntityFieldUpdateInput {
  customAttributes: String
  dataType: EnumDataType
  description: String
  displayName: String
  name: String
  position: Int
  properties: JSONObject
  required: Boolean
  searchable: Boolean
  unique: Boolean
}

input EntityFieldWhereInput {
  createdAt: DateTimeFilter
  customAttributes: StringFilter
  dataType: EnumDataTypeFilter
  description: StringFilter
  displayName: StringFilter
  id: StringFilter
  name: StringFilter
  permanentId: StringFilter
  required: BooleanFilter
  searchable: BooleanFilter
  unique: BooleanFilter
  updatedAt: DateTimeFilter
}

input EntityOrderByInput {
  createdAt: SortOrder
  customAttributes: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  name: SortOrder
  pluralDisplayName: SortOrder
  updatedAt: SortOrder
}

type EntityPermission {
  action: EnumEntityAction!
  entityVersion: EntityVersion
  entityVersionId: String!
  id: String!
  permissionFields: [EntityPermissionField!]
  permissionRoles: [EntityPermissionRole!]
  type: EnumEntityPermissionType!
}

type EntityPermissionField {
  entityVersionId: String!
  field: EntityField!
  fieldPermanentId: String!
  id: String!
  permission: EntityPermission
  permissionId: String!
  permissionRoles: [EntityPermissionRole!]
}

input EntityPermissionFieldWhereUniqueInput {
  action: EnumEntityAction!
  entityId: String!
  fieldPermanentId: String!
}

type EntityPermissionRole {
  action: EnumEntityAction!
  entityPermission: EntityPermission
  entityVersionId: String!
  id: String!
  resourceRole: ResourceRole!
  resourceRoleId: String!
}

input EntityUpdateInput {
  customAttributes: String
  description: String
  displayName: String
  name: String
  pluralDisplayName: String
}

input EntityUpdatePermissionFieldRolesInput {
  addPermissionRoles: [WhereUniqueInput!]
  deletePermissionRoles: [WhereUniqueInput!]
  permissionField: WhereParentIdInput!
}

input EntityUpdatePermissionInput {
  action: EnumEntityAction!
  type: EnumEntityPermissionType!
}

input EntityUpdatePermissionRolesInput {
  action: EnumEntityAction!
  addRoles: [WhereUniqueInput!]
  deleteRoles: [WhereUniqueInput!]
  entity: WhereParentIdInput!
}

type EntityVersion {
  commit: Commit
  createdAt: DateTime!
  customAttributes: String
  description: String
  displayName: String!
  entity: Entity!
  entityId: String!
  fields(orderBy: EntityFieldOrderByInput, skip: Int, take: Int, where: EntityFieldWhereInput): [EntityField!]!
  id: String!
  name: String!
  permissions: [EntityPermission!]
  pluralDisplayName: String!
  updatedAt: DateTime!
  versionNumber: Int!
}

input EntityVersionOrderByInput {
  createdAt: SortOrder
  customAttributes: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  label: SortOrder
  name: SortOrder
  pluralDisplayName: SortOrder
  updatedAt: SortOrder
  versionNumber: SortOrder
}

input EntityVersionWhereInput {
  createdAt: DateTimeFilter
  customAttributes: StringFilter
  description: StringFilter
  displayName: StringFilter
  entity: WhereUniqueInput
  id: StringFilter
  label: StringFilter
  name: StringFilter
  pluralDisplayName: StringFilter
  updatedAt: DateTimeFilter
  versionNumber: IntFilter
}

input EntityWhereInput {
  createdAt: DateTimeFilter
  customAttributes: StringFilter
  description: StringFilter
  displayName: StringFilter
  fields: EntityFieldFilter
  id: StringFilter
  name: StringFilter
  pluralDisplayName: StringFilter
  resource: WhereUniqueInput
  updatedAt: DateTimeFilter
}

enum EnumActionLogLevel {
  Debug
  Error
  Info
  Warning
}

enum EnumActionStepStatus {
  Failed
  Running
  Success
  Waiting
}

enum EnumAssistantFunctions {
  CommitProjectPendingChanges
  CreateEntities
  CreateEntityFields
  CreateModule
  CreateModuleAction
  CreateModuleDto
  CreateModuleEnum
  CreateProject
  CreateService
  GetModuleActions
  GetModuleDtosAndEnums
  GetPlugins
  GetProjectPendingChanges
  GetProjectServices
  GetService
  GetServiceEntities
  GetServiceModules
  InstallPlugins
}

enum EnumAssistantMessageRole {
  Assistant
  User
}

enum EnumAssistantMessageType {
  Default
  Onboarding
}

enum EnumAuthProviderType {
  Auth0
  Http
  Jwt
}

enum EnumBlockType {
  CodeEngineVersion
  Module
  ModuleAction
  ModuleDto
  Package
  PluginInstallation
  PluginOrder
  PrivatePlugin
  ProjectConfigurationSettings
  Relation
  ResourceSettings
  ServiceSettings
  ServiceTopics
  Topic
}

input EnumBlockTypeFilter {
  equals: EnumBlockType
  in: [EnumBlockType!]
  not: EnumBlockType
  notIn: [EnumBlockType!]
}

enum EnumBuildGitStatus {
  Canceled
  Completed
  Failed
  NotConnected
  Unknown
  Waiting
}

input EnumBuildGitStatusFilter {
  equals: EnumBuildGitStatus
  in: [EnumBuildGitStatus!]
  not: EnumBuildGitStatus
  notIn: [EnumBuildGitStatus!]
}

enum EnumBuildStatus {
  Canceled
  Completed
  Failed
  Invalid
  Running
  Unknown
}

input EnumBuildStatusFilter {
  equals: EnumBuildStatus
  in: [EnumBuildStatus!]
  not: EnumBuildStatus
  notIn: [EnumBuildStatus!]
}

enum EnumCodeGenerator {
  Blueprint
  DotNet
  NodeJs
}

input EnumCodeGeneratorFilter {
  equals: EnumCodeGenerator
}

enum EnumCommitStrategy {
  All
  AllWithPendingChanges
  Specific
}

enum EnumCustomPropertyType {
  Link
  MultiSelect
  Select
  Text
}

enum EnumDataType {
  Boolean
  CreatedAt
  DateTime
  DecimalNumber
  Email
  File
  GeographicLocation
  Id
  Json
  Lookup
  MultiLineText
  MultiSelectOptionSet
  OptionSet
  Password
  Roles
  SingleLineText
  UpdatedAt
  Username
  WholeNumber
}

input EnumDataTypeFilter {
  equals: EnumDataType
  in: [EnumDataType!]
  not: EnumDataType
  notIn: [EnumDataType!]
}

enum EnumEntityAction {
  Create
  Delete
  Search
  Update
  View
}

enum EnumEntityPermissionType {
  AllRoles
  Disabled
  Granular
  Public
}

enum EnumGitFolderContentItemType {
  Dir
  File
  Other
}

enum EnumGitOrganizationType {
  Organization
  User
}

enum EnumGitProvider {
  AwsCodeCommit
  AzureDevOps
  Bitbucket
  GitLab
  Github
}

enum EnumMessagePatternConnectionOptions {
  None
  Receive
  Send
}

enum EnumModuleActionGqlOperation {
  Mutation
  Query
}

enum EnumModuleActionRestInputSource {
  Body
  Params
  Query
  Split
}

enum EnumModuleActionRestVerb {
  Delete
  Get
  Head
  Options
  Patch
  Post
  Put
  Trace
}

enum EnumModuleActionType {
  ChildrenConnect
  ChildrenDisconnect
  ChildrenFind
  ChildrenUpdate
  Create
  Custom
  Delete
  Find
  Meta
  ParentGet
  Read
  Update
}

enum EnumModuleDtoPropertyType {
  Boolean
  DateTime
  Dto
  Enum
  Float
  Integer
  Json
  Null
  String
  Undefined
}

enum EnumModuleDtoType {
  CountArgs
  CreateArgs
  CreateInput
  CreateNestedManyInput
  Custom
  CustomEnum
  DeleteArgs
  Entity
  Enum
  FindManyArgs
  FindOneArgs
  ListRelationFilter
  OrderByInput
  UpdateArgs
  UpdateInput
  UpdateNestedManyInput
  WhereInput
  WhereUniqueInput
}

enum EnumOutdatedVersionAlertStatus {
  Canceled
  Ignored
  New
  Resolved
}

input EnumOutdatedVersionAlertStatusFilter {
  equals: EnumOutdatedVersionAlertStatus
  in: [EnumOutdatedVersionAlertStatus!]
  not: EnumOutdatedVersionAlertStatus
  notIn: [EnumOutdatedVersionAlertStatus!]
}

enum EnumOutdatedVersionAlertType {
  CodeEngineVersion
  PluginVersion
  TemplateVersion
}

input EnumOutdatedVersionAlertTypeFilter {
  equals: EnumOutdatedVersionAlertType
  in: [EnumOutdatedVersionAlertType!]
  not: EnumOutdatedVersionAlertType
  notIn: [EnumOutdatedVersionAlertType!]
}

enum EnumPackageStatus {
  Completed
  Failed
  Initial
}

enum EnumPendingChangeAction {
  Create
  Delete
  Update
}

enum EnumPendingChangeOriginType {
  Block
  Entity
}

enum EnumResourceType {
  Component
  MessageBroker
  PluginRepository
  ProjectConfiguration
  Service
  ServiceTemplate
}

input EnumResourceTypeFilter {
  equals: EnumResourceType
  in: [EnumResourceType!]
  not: EnumResourceType
  notIn: [EnumResourceType!]
}

enum EnumResourceTypeGroup {
  Platform
  Services
}

enum EnumSchemaNames {
  Abby
  CalDotCom
  Formbricks
  Papermark
}

enum EnumSubscriptionPlan {
  Enterprise
  Essential
  Free
  PreviewBreakTheMonolith
  Pro
  Team
}

enum EnumSubscriptionStatus {
  Active
  Deleted
  PastDue
  Paused
  Trailing
}

enum EnumTimeGroup {
  Day
  Month
  Week
  Year
}

enum EnumUserActionStatus {
  Completed
  Failed
  Invalid
  Running
}

enum EnumUserActionType {
  DBSchemaImport
  GptConversation
  ProjectRedesign
}

enum EnumWorkspaceMemberType {
  Invitation
  User
}

type Environment {
  address: String!
  createdAt: DateTime!
  description: String
  id: String!
  name: String!
  resource: Resource!
  resourceId: String!
  updatedAt: DateTime!
}

type EvaluationInsights {
  codeQuality: Int!
  costSaved: Int!
  loc: Int!
  timeSaved: Int!
}

type GitFolderContent {
  content: [GitFolderContentItem!]!
}

type GitFolderContentItem {
  name: String!
  path: String!
  type: EnumGitFolderContentItemType!
}

input GitGetInstallationUrlInput {
  gitProvider: EnumGitProvider!
  state: String
}

"""Group of Repositories"""
type GitGroup {
  displayName: String!
  id: String!
  name: String!
}

input GitGroupInput {
  organizationId: String!
}

input GitOAuth2FlowInput {
  code: String!
  gitProvider: EnumGitProvider!
  state: String
}

type GitOrganization {
  createdAt: DateTime!
  id: String!
  installationId: String!
  name: String!
  provider: EnumGitProvider!
  type: EnumGitOrganizationType!
  updatedAt: DateTime!

  """Defines if a git organisation needs defined repository groups"""
  useGroupingForRepositories: Boolean!
}

input GitOrganizationCreateInput {
  awsCodeCommitInput: GitOrganizationCreateInputAwsCodeCommit
  gitProvider: EnumGitProvider!
  githubInput: GitOrganizationCreateInputGitHub
}

input GitOrganizationCreateInputAwsCodeCommit {
  """AWS access key ID"""
  accessKeyId: String!

  """AWS secret access key"""
  accessKeySecret: String!

  """HTTPS Git credentials for AWS CodeCommit. Password"""
  gitPassword: String!

  """HTTPS Git credentials for AWS CodeCommit. Username"""
  gitUsername: String!

  """AWS region. Defaults to us-east-1"""
  region: String = "us-east-1"
}

input GitOrganizationCreateInputGitHub {
  installationId: String!
}

input GitOrganizationOrderByInput {
  id: SortOrder
  name: SortOrder
  provider: SortOrder
}

input GitOrganizationWhereInput {
  id: String
}

type GitRepository {
  baseBranchName: String
  createdAt: DateTime
  gitOrganization: GitOrganization!
  gitOrganizationId: String!
  groupName: String
  id: String!
  name: String!
  updatedAt: DateTime
}

input GitRepositoryOrderByInput {
  baseBranchName: SortOrder
  gitOrganization: GitOrganizationOrderByInput
  gitOrganizationId: SortOrder
  groupName: SortOrder
  id: SortOrder
  name: SortOrder
}

input GitRepositoryUpdateInput {
  baseBranchName: String
}

interface IBlock {
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  id: String!
  inputParameters: [BlockInputOutput!]!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  outputParameters: [BlockInputOutput!]!
  parentBlock: Block
  parentBlockId: String
  resourceId: String
  updatedAt: DateTime!
  versionNumber: Float!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Invitation {
  createdAt: DateTime!
  email: String!
  id: String!
  invitedByUser: User
  updatedAt: DateTime!
  workspace: Workspace
}

input InviteUserInput {
  email: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input JsonPathStringFilter {
  matchAll: [JsonPathStringFilterItem!]!
}

input JsonPathStringFilterItem {
  arrayContains: String
  equals: String
  path: String!
  stringContains: String
}

input LoginInput {
  email: String!
  password: String!
}

type MessagePattern {
  topicId: String!
  type: EnumMessagePatternConnectionOptions!
}

input MessagePatternCreateInput {
  topicId: String!
  type: EnumMessagePatternConnectionOptions!
}

type MetaQueryPayload {
  count: Float!
}

type Metrics {
  count: Int!
  month: Int!
  timeGroup: Int!
  year: Int!
}

type Module implements IBlock {
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  enabled: Boolean!
  entityId: String
  id: String!
  inputParameters: [BlockInputOutput!]!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  name: String!
  outputParameters: [BlockInputOutput!]!
  parentBlock: Block
  parentBlockId: String
  resourceId: String
  updatedAt: DateTime!
  versionNumber: Float!
}

type ModuleAction implements IBlock {
  actionType: EnumModuleActionType!
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  enabled: Boolean!
  fieldPermanentId: String
  gqlOperation: EnumModuleActionGqlOperation!
  id: String!
  inputParameters: [BlockInputOutput!]!
  inputType: PropertyTypeDef
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  name: String!
  outputParameters: [BlockInputOutput!]!
  outputType: PropertyTypeDef
  parentBlock: Block
  parentBlockId: String
  path: String
  resourceId: String
  restInputBodyPropertyName: String
  restInputParamsPropertyName: String
  restInputQueryPropertyName: String
  restInputSource: EnumModuleActionRestInputSource
  restVerb: EnumModuleActionRestVerb!
  updatedAt: DateTime!
  versionNumber: Float!
}

input ModuleActionCreateInput {
  description: String
  displayName: String!
  inputParameters: [BlockInputOutputInput!]
  name: String
  outputParameters: [BlockInputOutputInput!]
  parentBlock: WhereParentIdInput
  resource: WhereParentIdInput!
}

input ModuleActionOrderByInput {
  blockType: SortOrder
  createdAt: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input ModuleActionUpdateInput {
  description: String
  displayName: String
  enabled: Boolean
  gqlOperation: EnumModuleActionGqlOperation
  inputType: PropertyTypeDefInput
  name: String
  outputType: PropertyTypeDefInput
  path: String
  restInputBodyPropertyName: String
  restInputParamsPropertyName: String
  restInputQueryPropertyName: String
  restInputSource: EnumModuleActionRestInputSource
  restVerb: EnumModuleActionRestVerb
}

input ModuleActionWhereInput {
  createdAt: DateTimeFilter
  description: StringFilter
  displayName: StringFilter
  id: StringFilter
  includeCustomActions: Boolean
  includeDefaultActions: Boolean
  parentBlock: WhereUniqueInput
  resource: ResourceWhereInput
  updatedAt: DateTimeFilter
}

input ModuleCreateInput {
  description: String
  displayName: String!
  inputParameters: [BlockInputOutputInput!]
  name: String
  outputParameters: [BlockInputOutputInput!]
  parentBlock: WhereParentIdInput
  resource: WhereParentIdInput!
}

type ModuleDto implements IBlock {
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  dtoType: EnumModuleDtoType!
  enabled: Boolean!
  id: String!
  inputParameters: [BlockInputOutput!]!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  members: [ModuleDtoEnumMember!]
  name: String!
  outputParameters: [BlockInputOutput!]!
  parentBlock: Block
  parentBlockId: String
  properties: [ModuleDtoProperty!]
  relatedEntityId: String
  resourceId: String
  updatedAt: DateTime!
  versionNumber: Float!
}

input ModuleDtoCreateInput {
  description: String
  displayName: String!
  inputParameters: [BlockInputOutputInput!]
  name: String
  outputParameters: [BlockInputOutputInput!]
  parentBlock: WhereParentIdInput
  resource: WhereParentIdInput!
}

type ModuleDtoEnumMember {
  name: String!
  value: String!
}

input ModuleDtoEnumMemberCreateInput {
  moduleDto: WhereParentIdInput!
  name: String
}

input ModuleDtoEnumMemberInput {
  name: String!
  value: String!
}

input ModuleDtoEnumMemberUpdateInput {
  name: String!
  value: String!
}

input ModuleDtoOrderByInput {
  blockType: SortOrder
  createdAt: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type ModuleDtoProperty {
  isArray: Boolean!
  isOptional: Boolean!
  name: String!
  propertyTypes: [PropertyTypeDef!]!
}

input ModuleDtoPropertyCreateInput {
  moduleDto: WhereParentIdInput!
  name: String
}

input ModuleDtoPropertyInput {
  isArray: Boolean!
  isOptional: Boolean!
  name: String!
  propertyTypes: [PropertyTypeDefInput!]!
}

input ModuleDtoPropertyUpdateInput {
  isArray: Boolean!
  isOptional: Boolean!
  name: String!
  propertyTypes: [PropertyTypeDefInput!]!
}

input ModuleDtoUpdateInput {
  description: String
  displayName: String
  enabled: Boolean!
  name: String
}

input ModuleDtoWhereInput {
  createdAt: DateTimeFilter
  description: StringFilter
  displayName: StringFilter
  id: StringFilter
  includeCustomDtos: Boolean
  includeDefaultDtos: Boolean
  parentBlock: WhereUniqueInput
  resource: ResourceWhereInput
  updatedAt: DateTimeFilter
}

input ModuleOrderByInput {
  blockType: SortOrder
  createdAt: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input ModuleUpdateInput {
  description: String
  displayName: String
  enabled: Boolean
  name: String
}

input ModuleWhereInput {
  createdAt: DateTimeFilter
  description: StringFilter
  displayName: StringFilter
  id: StringFilter
  parentBlock: WhereUniqueInput
  resource: ResourceWhereInput
  updatedAt: DateTimeFilter
}

type Mutation {
  addEntityPermissionField(data: EntityAddPermissionFieldInput!): EntityPermissionField!
  addMemberToTeams(data: AddMemberToTeamsInput!, where: WhereUniqueInput!): User!
  addMembersToTeam(data: TeamUpdateMembersInput!, where: WhereUniqueInput!): Team!
  addRolePermissions(data: RoleAddRemovePermissionsInput!, where: WhereUniqueInput!): Role!
  addRolesToTeam(data: TeamUpdateRolesInput!, where: WhereUniqueInput!): Team!
  addRolesToTeamAssignment(data: TeamUpdateRolesInput!, where: WhereTeamAssignmentInput!): TeamAssignment!
  bulkUpdateWorkspaceProjectsAndResourcesLicensed(useUserLastActive: Boolean): Boolean!
  changePassword(data: ChangePasswordInput!): Account!
  commit(data: CommitCreateInput!): Commit
  completeGitOAuth2Flow(data: GitOAuth2FlowInput!): GitOrganization!
  completeInvitation(data: CompleteInvitationInput!): Auth!
  connectResourceGitRepository(data: ConnectGitRepositoryInput!): Resource!
  connectResourceToNewRemoteGitRepository(data: CreateGitRepositoryInput!): Resource!
  connectResourceToProjectRepository(resourceId: String!): Resource!
  createApiToken(data: ApiTokenCreateInput!): ApiToken!
  createBlueprint(data: BlueprintCreateInput!): Blueprint!
  createComponent(data: ResourceCreateInput!): Resource!
  createCustomProperty(data: CustomPropertyCreateInput!): CustomProperty!
  createCustomPropertyOption(data: CustomPropertyOptionCreateInput!): CustomPropertyOption!
  createDefaultEntities(data: DefaultEntitiesInput!): [Entity!]
  createEntitiesFromPredefinedSchema(data: CreateEntitiesFromPredefinedSchemaInput!): UserAction!
  createEntitiesFromPrismaSchema(data: DBSchemaImportCreateInput!, file: Upload!): UserAction!
  createEntityField(data: EntityFieldCreateInput!, relatedFieldAllowMultipleSelection: Boolean, relatedFieldDisplayName: String, relatedFieldName: String): EntityField!
  createEntityFieldByDisplayName(data: EntityFieldCreateByDisplayNameInput!): EntityField!
  createMessageBroker(data: ResourceCreateInput!): Resource!
  createModule(data: ModuleCreateInput!): Module!
  createModuleAction(data: ModuleActionCreateInput!): ModuleAction!
  createModuleDto(data: ModuleDtoCreateInput!, members: [ModuleDtoEnumMemberInput!], properties: [ModuleDtoPropertyInput!]): ModuleDto!
  createModuleDtoEnum(data: ModuleDtoCreateInput!, members: [ModuleDtoEnumMemberInput!], properties: [ModuleDtoPropertyInput!]): ModuleDto!
  createModuleDtoEnumMember(data: ModuleDtoEnumMemberCreateInput!): ModuleDtoEnumMember!
  createModuleDtoProperty(data: ModuleDtoPropertyCreateInput!): ModuleDtoProperty!
  createOneEntity(data: EntityCreateInput!): Entity!
  createOrganization(data: GitOrganizationCreateInput!): GitOrganization!
  createPackage(data: PackageCreateInput!): Package!
  createPluginInstallation(data: PluginInstallationCreateInput!): PluginInstallation!
  createPluginRepository(data: ResourceCreateInput!): Resource!
  createPrivatePlugin(data: PrivatePluginCreateInput!): PrivatePlugin!
  createPrivatePluginVersion(data: PrivatePluginVersionCreateInput!): PrivatePluginVersion!
  createProject(data: ProjectCreateInput!): Project!
  createRelation(data: RelationCreateInput!): Relation!
  createResourceRole(data: ResourceRoleCreateInput!): ResourceRole!
  createRole(data: RoleCreateInput!): Role!
  createService(data: ResourceCreateInput!): Resource!
  createServiceFromTemplate(data: ServiceFromTemplateCreateInput!): Resource!
  createServiceTemplate(data: ServiceTemplateCreateInput!): Resource!
  createServiceTopics(data: ServiceTopicsCreateInput!): ServiceTopics!
  createServiceWithEntities(data: ResourceCreateWithEntitiesInput!): ResourceCreateWithEntitiesResult!
  createTeam(data: TeamCreateInput!): Team!
  createTeamAssignments(data: CreateTeamAssignmentsInput!, where: CreateTeamAssignmentsWhereInput!): [TeamAssignment!]!
  createTopic(data: TopicCreateInput!): Topic!
  createWorkspace(data: WorkspaceCreateInput!): Workspace
  deleteApiToken(where: WhereUniqueInput!): ApiToken!
  deleteBlueprint(where: WhereUniqueInput!): Blueprint
  deleteBlueprintRelation(where: WhereBlueprintRelationUniqueInput!): BlueprintRelation!
  deleteCustomProperty(where: WhereUniqueInput!): CustomProperty
  deleteCustomPropertyOption(where: WhereCustomPropertyOptionUniqueInput!): CustomPropertyOption!
  deleteEntity(where: WhereUniqueInput!): Entity
  deleteEntityField(where: WhereUniqueInput!): EntityField!
  deleteEntityPermissionField(where: EntityPermissionFieldWhereUniqueInput!): EntityPermissionField!
  deleteGitOrganization(gitOrganizationId: String!, gitProvider: EnumGitProvider!): Boolean!
  deleteGitRepository(gitRepositoryId: String!): Resource!
  deleteModule(where: WhereUniqueInput!): Module!
  deleteModuleAction(where: WhereUniqueInput!): ModuleAction!
  deleteModuleDto(where: WhereUniqueInput!): ModuleDto!
  deleteModuleDtoEnumMember(where: WhereEnumMemberUniqueInput!): ModuleDtoEnumMember!
  deleteModuleDtoProperty(where: WherePropertyUniqueInput!): ModuleDtoProperty!
  deletePackage(where: WhereUniqueInput!): Package!
  deletePluginInstallation(where: WhereUniqueInput!): PluginInstallation!
  deletePrivatePlugin(where: WhereUniqueInput!): PrivatePlugin!
  deleteProject(where: WhereUniqueInput!): Project
  deleteRelation(where: WhereUniqueInput!): Relation!
  deleteResource(where: WhereUniqueInput!): Resource
  deleteResourceRole(where: WhereUniqueInput!): ResourceRole
  deleteRole(where: WhereUniqueInput!): Role
  deleteServiceTopics(where: WhereUniqueInput!): ServiceTopics!
  deleteTeam(where: WhereUniqueInput!): Team
  deleteTeamAssignment(where: WhereTeamAssignmentInput!): TeamAssignment!
  deleteTopic(where: WhereUniqueInput!): Topic!
  deleteUser(where: WhereUniqueInput!): User
  discardPendingChanges(data: PendingChangesDiscardInput!): Boolean
  disconnectResourceGitRepository(overrideProjectSettings: Boolean, resourceId: String!): Resource!
  getGitResourceInstallationUrl(data: GitGetInstallationUrlInput!): AuthorizeResourceWithGitResult!
  inviteUser(data: InviteUserInput!): Invitation
  lockEntity(where: WhereUniqueInput!): Entity
  login(data: LoginInput!): Auth!
  provisionSubscription(data: ProvisionSubscriptionInput!): ProvisionSubscriptionResult
  redeemCoupon(data: RedeemCouponInput!): Coupon!
  redesignProject(data: RedesignProjectInput!): UserAction!
  removeMembersFromTeam(data: TeamUpdateMembersInput!, where: WhereUniqueInput!): Team!
  removeRolePermissions(data: RoleAddRemovePermissionsInput!, where: WhereUniqueInput!): Role!
  removeRolesFromTeam(data: TeamUpdateRolesInput!, where: WhereUniqueInput!): Team!
  removeRolesFromTeamAssignment(data: TeamUpdateRolesInput!, where: WhereTeamAssignmentInput!): TeamAssignment!
  resendInvitation(where: WhereUniqueInput!): Invitation
  revokeInvitation(where: WhereUniqueInput!): Invitation
  scaffoldServiceFromTemplate(data: ScaffoldServiceFromTemplateInput!): Resource!
  sendAssistantMessageWithStream(context: AssistantContext!, data: SendAssistantMessageInput!): AssistantThread!
  setCurrentWorkspace(data: WhereUniqueInput!): Auth!
  setPluginOrder(data: PluginSetOrderInput!, where: WhereUniqueInput!): PluginOrder
  setResourceOwner(data: ResourceSetOwnerInput!): Resource!
  signup(data: SignupInput!): Auth!
  signupWithBusinessEmail(data: SignupWithBusinessEmailInput!): Boolean!
  startRedesign(data: WhereUniqueInput!): Resource

  """
  Trigger the generation of a set of recommendations for breaking a resource into microservices
  """
  triggerBreakServiceIntoMicroservices(resourceId: String!): UserAction
  updateAccount(data: UpdateAccountInput!): Account!
  updateBlueprint(data: BlueprintUpdateInput!, where: WhereUniqueInput!): Blueprint!
  updateCodeGeneratorVersion(data: CodeGeneratorVersionUpdateInput!, where: WhereUniqueInput!): Resource
  updateCustomProperty(data: CustomPropertyUpdateInput!, where: WhereUniqueInput!): CustomProperty!
  updateCustomPropertyOption(data: CustomPropertyOptionUpdateInput!, where: WhereCustomPropertyOptionUniqueInput!): CustomPropertyOption!
  updateEntity(data: EntityUpdateInput!, where: WhereUniqueInput!): Entity
  updateEntityField(data: EntityFieldUpdateInput!, relatedFieldAllowMultipleSelection: Boolean, relatedFieldDisplayName: String, relatedFieldName: String, where: WhereUniqueInput!): EntityField!
  updateEntityPermission(data: EntityUpdatePermissionInput!, where: WhereUniqueInput!): EntityPermission!
  updateEntityPermissionFieldRoles(data: EntityUpdatePermissionFieldRolesInput!): EntityPermissionField!
  updateEntityPermissionRoles(data: EntityUpdatePermissionRolesInput!): EntityPermission!
  updateGitRepository(data: GitRepositoryUpdateInput!, where: WhereUniqueInput!): GitRepository!
  updateModule(data: ModuleUpdateInput!, where: WhereUniqueInput!): Module!
  updateModuleAction(data: ModuleActionUpdateInput!, where: WhereUniqueInput!): ModuleAction!
  updateModuleDto(data: ModuleDtoUpdateInput!, where: WhereUniqueInput!): ModuleDto!
  updateModuleDtoEnumMember(data: ModuleDtoEnumMemberUpdateInput!, where: WhereEnumMemberUniqueInput!): ModuleDtoEnumMember!
  updateModuleDtoProperty(data: ModuleDtoPropertyUpdateInput!, where: WherePropertyUniqueInput!): ModuleDtoProperty!
  updateOutdatedVersionAlert(data: OutdatedVersionAlertUpdateInput!, where: WhereUniqueInput!): OutdatedVersionAlert!
  updatePackage(data: PackageUpdateInput!, where: WhereUniqueInput!): Package!
  updatePluginInstallation(data: PluginInstallationUpdateInput!, where: WhereUniqueInput!): PluginInstallation!
  updatePrivatePlugin(data: PrivatePluginUpdateInput!, where: WhereUniqueInput!): PrivatePlugin!
  updatePrivatePluginVersion(data: PrivatePluginVersionUpdateInput!, where: WherePrivatePluginVersionUniqueInput!): PrivatePluginVersion!
  updateProject(data: ProjectUpdateInput!, where: WhereUniqueInput!): Project!
  updateProjectConfigurationSettings(data: ProjectConfigurationSettingsUpdateInput!, where: WhereUniqueInput!): ProjectConfigurationSettings
  updateRelation(data: RelationUpdateInput!, where: WhereUniqueInput!): Relation!
  updateResource(data: ResourceUpdateInput!, where: WhereUniqueInput!): Resource
  updateResourceRelation(data: ResourceRelationUpdateInput!, resource: WhereUniqueInput!): Relation!
  updateResourceRole(data: ResourceRoleUpdateInput!, where: WhereUniqueInput!): ResourceRole
  updateResourceSettings(data: ResourceSettingsUpdateInput!, where: WhereUniqueInput!): ResourceSettings
  updateRole(data: RoleUpdateInput!, where: WhereUniqueInput!): Role!
  updateServiceSettings(data: ServiceSettingsUpdateInput!, where: WhereUniqueInput!): ServiceSettings
  updateServiceTopics(data: ServiceTopicsUpdateInput!, where: WhereUniqueInput!): ServiceTopics!
  updateTeam(data: TeamUpdateInput!, where: WhereUniqueInput!): Team!
  updateTopic(data: TopicUpdateInput!, where: WhereUniqueInput!): Topic!
  updateWorkspace(data: WorkspaceUpdateInput!, where: WhereUniqueInput!): Workspace
  upgradeServiceToLatestTemplateVersion(where: WhereUniqueInput!): Resource!
  upsertBlueprintRelation(data: BlueprintRelationUpsertInput!, where: WhereBlueprintRelationUniqueInput!): BlueprintRelation!
}

type OutdatedVersionAlert {
  block: Block
  blockId: String
  createdAt: DateTime!
  id: String!
  latestVersion: String!
  outdatedVersion: String!
  resource: Resource
  resourceId: String!
  status: EnumOutdatedVersionAlertStatus!
  type: EnumOutdatedVersionAlertType!
  updatedAt: DateTime!
}

input OutdatedVersionAlertOrderByInput {
  block: BlockOrderByInput
  createdAt: SortOrder
  id: SortOrder
  latestVersion: SortOrder
  outdatedVersion: SortOrder
  resource: ResourceOrderByInput
  status: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input OutdatedVersionAlertUpdateInput {
  status: String
}

input OutdatedVersionAlertWhereInput {
  block: WhereUniqueInput
  createdAt: DateTimeFilter
  id: StringFilter
  latestVersion: StringFilter
  outdatedVersion: StringFilter
  resource: ResourceWhereInput!
  status: EnumOutdatedVersionAlertStatusFilter
  type: EnumOutdatedVersionAlertTypeFilter
  updatedAt: DateTimeFilter
}

union Owner = Team | User

input OwnershipWhereInput {
  teamId: String
  userId: String
}

type Package implements IBlock {
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  id: String!
  inputParameters: [BlockInputOutput!]!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  outputParameters: [BlockInputOutput!]!
  parentBlock: Block
  parentBlockId: String
  resourceId: String
  summary: String!
  updatedAt: DateTime!
  versionNumber: Float!
}

input PackageCreateInput {
  description: String
  displayName: String!
  inputParameters: [BlockInputOutputInput!]
  outputParameters: [BlockInputOutputInput!]
  parentBlock: WhereParentIdInput
  resource: WhereParentIdInput!
  summary: String!
}

input PackageOrderByInput {
  blockType: SortOrder
  createdAt: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input PackageUpdateInput {
  description: String
  displayName: String
  packageStatus: EnumPackageStatus
  summary: String
}

input PackageWhereInput {
  createdAt: DateTimeFilter
  description: StringFilter
  displayName: StringFilter
  id: StringFilter
  parentBlock: WhereUniqueInput
  resource: ResourceWhereInput
  updatedAt: DateTimeFilter
}

"""Returns a paginated list of repository groups available to select."""
type PaginatedGitGroup {
  groups: [GitGroup!]

  """Page number"""
  page: Float!

  """Number of groups per page"""
  pageSize: Float!

  """Total number of groups"""
  total: Float!
}

type PaginatedResourceQueryResult {
  data: [Resource!]
  totalCount: Int!
}

type Pagination {
  page: Float!
  perPage: Float!
}

type PendingChange {
  action: EnumPendingChangeAction!
  origin: PendingChangeOrigin!
  originId: String!
  originType: EnumPendingChangeOriginType!
  resource: Resource!
  versionNumber: Int!
}

union PendingChangeOrigin = Block | Entity

input PendingChangesDiscardInput {
  project: WhereParentIdInput!
  resourceTypeGroup: EnumResourceTypeGroup!
}

input PendingChangesFindInput {
  project: WhereUniqueInput!
  resourceTypeGroup: EnumResourceTypeGroup!
}

type PluginInstallation implements IBlock {
  blockType: EnumBlockType!
  configurations: JSONObject
  createdAt: DateTime!
  description: String
  displayName: String!
  enabled: Boolean!
  id: String!
  inputParameters: [BlockInputOutput!]!
  isPrivate: Boolean
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  npm: String!
  outputParameters: [BlockInputOutput!]!
  parentBlock: Block
  parentBlockId: String
  pluginId: String!
  resourceId: String
  settings: JSONObject
  updatedAt: DateTime!
  version: String!
  versionNumber: Float!
}

input PluginInstallationCreateInput {
  configurations: JSONObject
  description: String
  displayName: String!
  enabled: Boolean!
  inputParameters: [BlockInputOutputInput!]
  isPrivate: Boolean!
  npm: String!
  outputParameters: [BlockInputOutputInput!]
  parentBlock: WhereParentIdInput
  pluginId: String!
  resource: WhereParentIdInput!
  settings: JSONObject
  version: String!
}

input PluginInstallationOrderByInput {
  blockType: SortOrder
  createdAt: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input PluginInstallationUpdateInput {
  configurations: JSONObject
  description: String
  displayName: String
  enabled: Boolean!
  settings: JSONObject
  version: String!
}

input PluginInstallationWhereInput {
  createdAt: DateTimeFilter
  description: StringFilter
  displayName: StringFilter
  id: StringFilter
  parentBlock: WhereUniqueInput
  resource: ResourceWhereInput
  updatedAt: DateTimeFilter
}

input PluginInstallationsCreateInput {
  plugins: [PluginInstallationCreateInput!]
}

type PluginOrder implements IBlock {
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  id: String!
  inputParameters: [BlockInputOutput!]!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  order: [PluginOrderItem!]!
  outputParameters: [BlockInputOutput!]!
  parentBlock: Block
  parentBlockId: String
  resourceId: String
  updatedAt: DateTime!
  versionNumber: Float!
}

type PluginOrderItem {
  order: Int!
  pluginId: String!
}

input PluginSetOrderInput {
  order: Int!
}

type PrivatePlugin implements IBlock {
  blockType: EnumBlockType!
  blueprints: [String!]
  codeGenerator: EnumCodeGenerator!
  color: String
  createdAt: DateTime!
  description: String
  displayName: String!
  enabled: Boolean!
  icon: String
  id: String!
  inputParameters: [BlockInputOutput!]!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  outputParameters: [BlockInputOutput!]!
  parentBlock: Block
  parentBlockId: String
  pluginId: String!
  resourceId: String
  updatedAt: DateTime!
  versionNumber: Float!
  versions: [PrivatePluginVersion!]!
}

input PrivatePluginCreateInput {
  codeGenerator: EnumCodeGenerator!
  description: String
  displayName: String!
  enabled: Boolean!
  inputParameters: [BlockInputOutputInput!]
  outputParameters: [BlockInputOutputInput!]
  parentBlock: WhereParentIdInput
  pluginId: String!
  resource: WhereParentIdInput!
}

input PrivatePluginOrderByInput {
  blockType: SortOrder
  createdAt: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input PrivatePluginUpdateInput {
  blueprints: [String!]
  codeGenerator: EnumCodeGenerator
  color: String
  description: String
  displayName: String
  enabled: Boolean!
  icon: String
}

type PrivatePluginVersion {
  configurations: JSONObject
  deprecated: Boolean!
  enabled: Boolean!
  settings: JSONObject
  version: String!
}

input PrivatePluginVersionCreateInput {
  privatePlugin: WhereParentIdInput!
  version: String!
}

input PrivatePluginVersionUpdateInput {
  configurations: JSONObject
  deprecated: Boolean
  enabled: Boolean
  settings: JSONObject
}

input PrivatePluginWhereInput {
  blue: EnumCodeGeneratorFilter
  codeGenerator: EnumCodeGeneratorFilter
  createdAt: DateTimeFilter
  description: StringFilter
  displayName: StringFilter
  id: StringFilter
  parentBlock: WhereUniqueInput
  resource: ResourceWhereInput
  updatedAt: DateTimeFilter
}

type Project {
  createdAt: DateTime!
  demoRepoName: String
  description: String
  id: String!
  licensed: Boolean!
  name: String!
  platformIsPublic: Boolean
  resources: [Resource!]
  updatedAt: DateTime!
  useDemoRepo: Boolean!
}

type ProjectConfigurationSettings implements IBlock {
  baseDirectory: String!
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  id: String!
  inputParameters: [BlockInputOutput!]!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  outputParameters: [BlockInputOutput!]!
  overrideCustomizableFilesInGit: Boolean
  parentBlock: Block
  parentBlockId: String
  resourceId: String
  updatedAt: DateTime!
  versionNumber: Float!
}

input ProjectConfigurationSettingsUpdateInput {
  baseDirectory: String
  description: String
  displayName: String
  overrideCustomizableFilesInGit: Boolean
}

input ProjectCreateInput {
  name: String!
}

input ProjectOrderByInput {
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
}

input ProjectUpdateInput {
  platformIsPublic: Boolean
}

input ProjectWhereInput {
  deletedAt: DateTimeFilter
  id: String
  name: StringFilter
  platformIsPublic: BooleanFilter
}

type PropertySelector {
  include: Boolean!
  propertyName: String!
}

input PropertySelectorInput {
  include: Boolean!
  propertyName: String!
}

type PropertyTypeDef {
  dtoId: String
  isArray: Boolean!
  type: EnumModuleDtoPropertyType!
}

input PropertyTypeDefInput {
  dtoId: String
  isArray: Boolean!
  type: EnumModuleDtoPropertyType!
}

input ProvisionSubscriptionInput {
  billingPeriod: String!
  cancelUrl: String
  intentionType: String!
  planId: String!
  successUrl: String
  workspaceId: String!
}

type ProvisionSubscriptionResult {
  checkoutUrl: String
  provisionStatus: String!
}

type Query {
  _outdatedVersionAlertsMeta(orderBy: OutdatedVersionAlertOrderByInput, skip: Int, take: Int, where: OutdatedVersionAlertWhereInput): MetaQueryPayload!
  _resourceVersionsMeta(orderBy: ResourceVersionOrderByInput, skip: Int, take: Int, where: ResourceVersionWhereInput): MetaQueryPayload!
  account: Account!
  action(where: WhereUniqueInput!): Action!
  availableDtosForResource(orderBy: ModuleDtoOrderByInput, skip: Int, take: Int, where: ModuleDtoWhereInput): [ModuleDto!]!
  availablePrivatePluginsForResource(orderBy: PrivatePluginOrderByInput, skip: Int, take: Int, where: PrivatePluginWhereInput): [PrivatePlugin!]!
  availableTemplatesForProject(orderBy: [ResourceOrderByInput!], skip: Int, take: Int, where: WhereUniqueInput!): [Resource!]!
  block(where: WhereUniqueInput!): Block!
  blocks(orderBy: BlockOrderByInput, skip: Int, take: Int, where: BlockWhereInput): [Block!]!
  blueprint(where: WhereUniqueInput!): Blueprint
  blueprints(orderBy: BlueprintOrderByInput, skip: Int, take: Int, where: BlueprintWhereInput): [Blueprint!]!
  build(where: WhereUniqueInput!): Build!
  builds(orderBy: BuildOrderByInput, skip: Int, take: Int, where: BuildWhereInput): [Build!]!
  catalog(orderBy: [ResourceOrderByInput!], skip: Int, take: Int, where: ResourceWhereInputWithPropertiesFilter): PaginatedResourceQueryResult!
  commit(where: CommitWhereUniqueInput!): Commit
  commits(cursor: CommitWhereUniqueInput, orderBy: CommitOrderByInput, skip: Int, take: Int, where: CommitWhereInput!): [Commit!]
  compareResourceVersions(where: CompareResourceVersionsWhereInput!): ResourceVersionsDiff!
  contactUsLink(where: WhereUniqueInput!): String
  currentWorkspace: Workspace
  customProperties(orderBy: CustomPropertyOrderByInput, skip: Int, take: Int, where: CustomPropertyWhereInput): [CustomProperty!]!
  customProperty(where: WhereUniqueInput!): CustomProperty
  entities(orderBy: EntityOrderByInput, skip: Int, take: Int, where: EntityWhereInput): [Entity!]!
  entity(where: WhereUniqueInput!): Entity

  """
  Get the changes to apply to the model in order to break a resource into microservices
  """
  finalizeBreakServiceIntoMicroservices(userActionId: String!): BreakServiceToMicroservicesResult!
  getEvaluationInsights(endDate: DateTime!, projectIds: [String!]!, startDate: DateTime!, timeGroup: EnumTimeGroup = Month): EvaluationInsights!
  getUsageInsights(endDate: DateTime!, projectIds: [String!]!, startDate: DateTime!, timeGroup: EnumTimeGroup = Month): UsageInsightsResult!
  gitGroups(where: GitGroupInput!): PaginatedGitGroup!
  gitOrganization(where: WhereUniqueInput!): GitOrganization!
  gitOrganizations(skip: Float, take: Float, where: GitOrganizationWhereInput): [GitOrganization!]!
  me: User!
  messageBrokerConnectedServices(where: WhereUniqueInput!): [Resource!]!
  module(where: WhereUniqueInput!): Module
  moduleAction(where: WhereUniqueInput!): ModuleAction
  moduleActions(orderBy: ModuleActionOrderByInput, skip: Int, take: Int, where: ModuleActionWhereInput): [ModuleAction!]!
  moduleDto(where: WhereUniqueInput!): ModuleDto
  moduleDtos(orderBy: ModuleDtoOrderByInput, skip: Int, take: Int, where: ModuleDtoWhereInput): [ModuleDto!]!
  modules(orderBy: ModuleOrderByInput, skip: Int, take: Int, where: ModuleWhereInput): [Module!]!
  outdatedVersionAlert(where: WhereUniqueInput!): OutdatedVersionAlert!
  outdatedVersionAlerts(orderBy: OutdatedVersionAlertOrderByInput, skip: Int, take: Int, where: OutdatedVersionAlertWhereInput): [OutdatedVersionAlert!]!
  package(where: WhereUniqueInput!): Package
  packageList(orderBy: PackageOrderByInput, skip: Int, take: Int, where: PackageWhereInput): [Package!]!
  pendingChanges(where: PendingChangesFindInput!): [PendingChange!]!
  permissions: [String!]!
  pluginInstallation(where: WhereUniqueInput!): PluginInstallation
  pluginInstallations(orderBy: PluginInstallationOrderByInput, skip: Int, take: Int, where: PluginInstallationWhereInput): [PluginInstallation!]!
  pluginOrder(where: WhereUniqueInput!): PluginOrder!
  pluginRepositoryRemotePlugins(where: WhereUniqueInput!): GitFolderContent!
  privatePlugin(where: WhereUniqueInput!): PrivatePlugin
  privatePlugins(orderBy: PrivatePluginOrderByInput, skip: Int, take: Int, where: PrivatePluginWhereInput): [PrivatePlugin!]!
  project(where: WhereUniqueInput!): Project
  projectConfigurationSettings(where: WhereUniqueInput!): ProjectConfigurationSettings!
  projects(orderBy: ProjectOrderByInput, skip: Int, take: Int, where: ProjectWhereInput): [Project!]!
  relation(where: WhereUniqueInput!): Relation
  relations(orderBy: RelationOrderByInput, skip: Int, take: Int, where: RelationWhereInput): [Relation!]!
  remoteGitRepositories(where: RemoteGitRepositoriesWhereUniqueInput!): RemoteGitRepos!
  resource(where: WhereUniqueInput!): Resource
  resourcePermissions(where: WhereUniqueInput!): [String!]!
  resourceRole(version: Float, where: WhereUniqueInput!): ResourceRole
  resourceRoles(orderBy: ResourceRoleOrderByInput, skip: Int, take: Int, where: ResourceRoleWhereInput): [ResourceRole!]!
  resourceSettings(where: WhereUniqueInput!): ResourceSettings
  resourceVersion(where: WhereUniqueInput!): ResourceVersion!
  resourceVersions(orderBy: ResourceVersionOrderByInput, skip: Int, take: Int, where: ResourceVersionWhereInput): [ResourceVersion!]!
  resources(orderBy: [ResourceOrderByInput!], skip: Int, take: Int, where: ResourceWhereInputWithPropertiesFilter): [Resource!]!
  role(where: WhereUniqueInput!): Role
  roles(orderBy: RoleOrderByInput, skip: Int, take: Int, where: RoleWhereInput): [Role!]!
  serviceSettings(where: WhereUniqueInput!): ServiceSettings!
  serviceTemplates(orderBy: [ResourceOrderByInput!], skip: Int, take: Int, where: ResourceWhereInputWithPropertiesFilter): [Resource!]!
  serviceTopics(where: WhereUniqueInput!): ServiceTopics
  serviceTopicsList(orderBy: ServiceTopicsOrderByInput, skip: Int, take: Int, where: ServiceTopicsWhereInput): [ServiceTopics!]!
  team(where: WhereUniqueInput!): Team
  teams(orderBy: TeamOrderByInput, skip: Int, take: Int, where: TeamWhereInput): [Team!]!
  topic(where: WhereUniqueInput!): Topic
  topics(orderBy: TopicOrderByInput, skip: Int, take: Int, where: TopicWhereInput): [Topic!]!
  user(where: WhereUniqueInput!): User
  userAction(where: WhereUniqueInput!): UserAction!
  userApiTokens: [ApiToken!]!
  workspace(where: WhereUniqueInput!): Workspace
  workspaceMembers: [WorkspaceMember!]
  workspaceUsers: [User!]
  workspaces: [Workspace!]!
}

enum QueryMode {
  Default
  Insensitive
}

input RedeemCouponInput {
  code: String!
}

input RedesignProjectInput {
  movedEntities: [RedesignProjectMovedEntity!]!
  newServices: [RedesignProjectNewService!]!
  projectId: String!
}

input RedesignProjectMovedEntity {
  entityId: String!
  originalResourceId: String!
  targetResourceId: String!
}

input RedesignProjectNewService {
  description: String!
  id: String!
  name: String!
}

type Relation implements IBlock {
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  id: String!
  inputParameters: [BlockInputOutput!]!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  outputParameters: [BlockInputOutput!]!
  parentBlock: Block
  parentBlockId: String
  relatedResources: [String!]!
  relationKey: String!
  resourceId: String
  updatedAt: DateTime!
  versionNumber: Float!
}

input RelationCreateInput {
  description: String
  displayName: String!
  inputParameters: [BlockInputOutputInput!]
  outputParameters: [BlockInputOutputInput!]
  parentBlock: WhereParentIdInput
  relatedResources: [String!]!
  relationKey: String!
  resource: WhereParentIdInput!
}

input RelationOrderByInput {
  blockType: SortOrder
  createdAt: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input RelationUpdateInput {
  description: String
  displayName: String
  relatedResources: [String!]!
}

input RelationWhereInput {
  createdAt: DateTimeFilter
  description: StringFilter
  displayName: StringFilter
  id: StringFilter
  parentBlock: WhereUniqueInput
  resource: ResourceWhereInput
  updatedAt: DateTimeFilter
}

type RemoteGitRepos {
  pagination: Pagination!
  repos: [RemoteGitRepository!]!
  total: Float!
}

input RemoteGitRepositoriesWhereUniqueInput {
  gitOrganizationId: String!
  gitProvider: EnumGitProvider!
  groupName: String

  """The page number. One-based indexing"""
  page: Float! = 1

  """The number of items to return per page"""
  perPage: Float! = 10
}

type RemoteGitRepository {
  defaultBranch: String!
  fullName: String!
  groupName: String
  name: String!
  private: Boolean!
  url: String!
}

type Resource {
  blueprint: Blueprint
  blueprintId: String
  builds(orderBy: BuildOrderByInput, skip: Int, take: Int, where: BuildWhereInput): [Build!]!
  codeGenerator: EnumCodeGenerator
  codeGeneratorStrategy: CodeGeneratorVersionStrategy
  codeGeneratorVersion: String
  createdAt: DateTime!
  description: String!
  entities(orderBy: EntityOrderByInput, skip: Int, take: Int, where: EntityWhereInput): [Entity!]!
  environments: [Environment!]!
  gitRepository: GitRepository
  gitRepositoryId: String
  gitRepositoryOverride: Boolean!
  githubLastMessage: String
  githubLastSync: DateTime
  id: String!
  licensed: Boolean!
  name: String!
  owner: Owner
  project: Project
  projectId: String
  properties: JSONObject
  relations: [Relation!]
  resourceType: EnumResourceType!
  serviceTemplate: Resource
  serviceTemplateVersion: String
  settings: ResourceSettings
  teamAssignments: [TeamAssignment!]
  updatedAt: DateTime!
  version: ResourceVersion
}

input ResourceCreateInput {
  blueprint: WhereParentIdInput
  codeGenerator: EnumCodeGenerator
  description: String!
  gitRepository: ConnectGitRepositoryInput
  name: String!
  project: WhereParentIdInput!
  resourceType: EnumResourceType!
  serviceSettings: ServiceSettingsUpdateInput
}

input ResourceCreateWithEntitiesEntityInput {
  fields: [ResourceCreateWithEntitiesFieldInput!]!
  name: String!
  relationsToEntityIndex: [Int!]
}

input ResourceCreateWithEntitiesFieldInput {
  dataType: EnumDataType
  name: String!
}

input ResourceCreateWithEntitiesInput {
  authType: String!
  commitMessage: String!
  connectToDemoRepo: Boolean!
  dbType: String!
  entities: [ResourceCreateWithEntitiesEntityInput!]!
  plugins: PluginInstallationsCreateInput
  repoType: String!
  resource: ResourceCreateInput!
  wizardType: String!
}

type ResourceCreateWithEntitiesResult {
  build: Build
  resource: Resource!
}

input ResourceOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  gitRepository: GitRepositoryOrderByInput
  id: SortOrder
  name: SortOrder
  project: ProjectOrderByInput
  resourceType: SortOrder
  updatedAt: SortOrder
}

input ResourceRelationUpdateInput {
  relatedResources: [String!]!
  relationKey: String!
}

type ResourceRole {
  createdAt: DateTime!
  description: String
  displayName: String!
  id: String!
  name: String!
  updatedAt: DateTime!
}

input ResourceRoleCreateInput {
  description: String!
  displayName: String!
  name: String!
  resource: WhereParentIdInput!
}

input ResourceRoleOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ResourceRoleUpdateInput {
  description: String
  displayName: String!
  name: String
}

input ResourceRoleWhereInput {
  createdAt: DateTimeFilter
  description: StringFilter
  displayName: StringFilter
  id: String
  name: StringFilter
  resource: WhereUniqueInput
  updatedAt: DateTimeFilter
}

input ResourceSetOwnerInput {
  resourceId: String!
  teamId: String
  userId: String
}

type ResourceSettings implements IBlock {
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  id: String!
  inputParameters: [BlockInputOutput!]!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  outputParameters: [BlockInputOutput!]!
  parentBlock: Block
  parentBlockId: String
  properties: JSONObject
  resourceId: String
  updatedAt: DateTime!
  versionNumber: Float!
}

input ResourceSettingsUpdateInput {
  description: String
  displayName: String
  properties: JSONObject
}

input ResourceUpdateInput {
  description: String
  name: String
  properties: JSONObject
}

type ResourceVersion {
  commit: Commit
  commitId: String!
  createdAt: DateTime!
  createdBy: User
  id: String!
  message: String
  resource: Resource
  resourceId: String!
  userId: String!
  version: String!
}

input ResourceVersionOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  message: SortOrder
  userId: SortOrder
  version: SortOrder
}

input ResourceVersionWhereInput {
  commit: WhereUniqueInput
  createdAt: DateTimeFilter
  createdBy: WhereUniqueInput
  id: StringFilter
  message: StringFilter
  resource: WhereUniqueInput!
  version: StringFilter
}

type ResourceVersionsDiff {
  createdBlocks: [BlockVersion!]
  deletedBlocks: [BlockVersion!]
  updatedBlocks: [ResourceVersionsDiffBlock!]
}

type ResourceVersionsDiffBlock {
  sourceBlockVersion: BlockVersion!
  targetBlockVersion: BlockVersion!
}

input ResourceWhereInput {
  blueprint: BlueprintWhereInput
  blueprintId: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: String
  name: StringFilter
  ownership: OwnershipWhereInput
  project: ProjectWhereInput
  projectId: String
  resourceType: EnumResourceTypeFilter
  serviceTemplateId: String
  updatedAt: DateTimeFilter
}

input ResourceWhereInputWithPropertiesFilter {
  blueprint: BlueprintWhereInput
  blueprintId: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: String
  name: StringFilter
  ownership: OwnershipWhereInput
  project: ProjectWhereInput
  projectId: String
  projectIdFilter: StringFilter
  properties: JsonPathStringFilter
  resourceType: EnumResourceTypeFilter
  serviceTemplateId: String
  updatedAt: DateTimeFilter
}

type Role {
  createdAt: DateTime!
  description: String
  id: String!
  key: String!
  name: String!
  permissions: [String!]
  updatedAt: DateTime!
}

input RoleAddRemovePermissionsInput {
  permissions: [String!]!
}

input RoleCreateInput {
  name: String!
}

input RoleOrderByInput {
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
}

input RoleUpdateInput {
  description: String
  key: String
  name: String
}

input RoleWhereInput {
  deletedAt: DateTimeFilter
  id: String
  key: String
  name: StringFilter
}

input ScaffoldServiceFromTemplateInput {
  name: String!
  project: WhereParentIdInput!
  serviceTemplateName: String!
}

input SendAssistantMessageInput {
  message: String!
  messageType: EnumAssistantMessageType
  threadId: String
}

type ServerSettings {
  generateGraphQL: Boolean!
  generateRestApi: Boolean!
  generateServer: Boolean
  serverPath: String!
}

input ServerSettingsUpdateInput {
  generateGraphQL: Boolean
  generateRestApi: Boolean
  generateServer: Boolean = true
  serverPath: String
}

input ServiceFromTemplateCreateInput {
  description: String!
  name: String!
  project: WhereParentIdInput!
  serviceTemplate: WhereUniqueInput!
}

type ServiceSettings implements IBlock {
  adminUISettings: AdminUISettings!
  authEntityName: String
  authProvider: EnumAuthProviderType!
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  id: String!
  inputParameters: [BlockInputOutput!]!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  outputParameters: [BlockInputOutput!]!
  parentBlock: Block
  parentBlockId: String
  resourceId: String
  serverSettings: ServerSettings!
  serviceTemplateVersion: ServiceTemplateVersion
  updatedAt: DateTime!
  versionNumber: Float!
}

input ServiceSettingsUpdateInput {
  adminUISettings: AdminUISettingsUpdateInput!
  authEntityName: String
  authProvider: EnumAuthProviderType!
  description: String
  displayName: String
  serverSettings: ServerSettingsUpdateInput!
}

input ServiceTemplateCreateInput {
  plugins: PluginInstallationsCreateInput
  resource: ResourceCreateInput!
}

type ServiceTemplateVersion {
  serviceTemplateId: String!
  version: String!
}

type ServiceTopics implements IBlock {
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  enabled: Boolean!
  id: String!
  inputParameters: [BlockInputOutput!]!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  messageBrokerId: String!
  outputParameters: [BlockInputOutput!]!
  parentBlock: Block
  parentBlockId: String
  patterns: [MessagePattern!]!
  resourceId: String
  updatedAt: DateTime!
  versionNumber: Float!
}

input ServiceTopicsCreateInput {
  description: String
  displayName: String!
  enabled: Boolean!
  inputParameters: [BlockInputOutputInput!]
  messageBrokerId: String!
  outputParameters: [BlockInputOutputInput!]
  parentBlock: WhereParentIdInput
  patterns: [MessagePatternCreateInput!]
  resource: WhereParentIdInput!
}

input ServiceTopicsOrderByInput {
  blockType: SortOrder
  createdAt: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input ServiceTopicsUpdateInput {
  description: String
  displayName: String
  enabled: Boolean!
  messageBrokerId: String!
  patterns: [MessagePatternCreateInput!]
}

input ServiceTopicsWhereInput {
  createdAt: DateTimeFilter
  description: StringFilter
  displayName: StringFilter
  id: StringFilter
  parentBlock: WhereUniqueInput
  resource: ResourceWhereInput
  updatedAt: DateTimeFilter
}

input SignupInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  workspaceName: String!
}

input SignupWithBusinessEmailInput {
  email: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Subscription {
  assistantMessageUpdated(threadId: String!): AssistantMessageDelta!
}

type Team {
  color: String
  createdAt: DateTime!
  description: String
  id: String!
  members: [User!]
  name: String!
  roles: [Role!]
  updatedAt: DateTime!
}

type TeamAssignment {
  createdAt: DateTime!
  id: String!
  resource: Resource!
  resourceId: String!
  roles: [Role!]
  team: Team
  teamId: String
  updatedAt: DateTime!
}

input TeamCreateInput {
  name: String!
}

input TeamOrderByInput {
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
}

input TeamUpdateInput {
  color: String
  description: String
  name: String
}

input TeamUpdateMembersInput {
  userIds: [String!]!
}

input TeamUpdateRolesInput {
  roleIds: [String!]!
}

input TeamWhereInput {
  deletedAt: DateTimeFilter
  id: String
  name: StringFilter
}

type Topic implements IBlock {
  blockType: EnumBlockType!
  createdAt: DateTime!
  description: String
  displayName: String!
  id: String!
  inputParameters: [BlockInputOutput!]!
  lockedAt: DateTime
  lockedByUser: User
  lockedByUserId: String
  name: String!
  outputParameters: [BlockInputOutput!]!
  parentBlock: Block
  parentBlockId: String
  resourceId: String
  updatedAt: DateTime!
  versionNumber: Float!
}

input TopicCreateInput {
  description: String
  displayName: String!
  inputParameters: [BlockInputOutputInput!]
  name: String
  outputParameters: [BlockInputOutputInput!]
  parentBlock: WhereParentIdInput
  resource: WhereParentIdInput!
}

input TopicOrderByInput {
  blockType: SortOrder
  createdAt: SortOrder
  description: SortOrder
  displayName: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input TopicUpdateInput {
  description: String
  displayName: String
  name: String
}

input TopicWhereInput {
  createdAt: DateTimeFilter
  description: StringFilter
  displayName: StringFilter
  id: StringFilter
  parentBlock: WhereUniqueInput
  resource: ResourceWhereInput
  updatedAt: DateTimeFilter
}

input UpdateAccountInput {
  firstName: String
  lastName: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UsageInsights {
  results: [Metrics!]!
}

type UsageInsightsResult {
  builds: UsageInsights!
  entities: UsageInsights!
  moduleActions: UsageInsights!
  plugins: UsageInsights!
}

type User {
  account: Account
  createdAt: DateTime!
  id: String!
  isOwner: Boolean!
  lastActive: DateTime
  teams: [Team!]!
  updatedAt: DateTime!
  workspace: Workspace
}

type UserAction {
  action: Action
  actionId: String!
  createdAt: DateTime!
  id: String!
  metadata: JSONObject
  resource: Resource
  resourceId: String!
  status: EnumUserActionStatus
  updatedAt: DateTime!
  user: User!
  userActionType: EnumUserActionType!
  userId: String!
}

input WhereBlueprintRelationUniqueInput {
  blueprint: WhereUniqueInput!
  relationKey: String!
}

input WhereCustomPropertyOptionUniqueInput {
  customProperty: WhereUniqueInput!
  value: String!
}

input WhereEnumMemberUniqueInput {
  enumMemberName: String!
  moduleDto: WhereUniqueInput!
}

input WhereParentIdInput {
  connect: WhereUniqueInput!
}

input WherePrivatePluginVersionUniqueInput {
  privatePlugin: WhereUniqueInput!
  version: String!
}

input WherePropertyUniqueInput {
  moduleDto: WhereUniqueInput!
  propertyName: String!
}

input WhereTeamAssignmentInput {
  resourceId: String!
  teamId: String!
}

input WhereUniqueInput {
  id: String!
}

type Workspace {
  allowLLMFeatures: Boolean!
  createdAt: DateTime!
  externalId: String
  gitOrganizations: [GitOrganization!]
  id: String!
  name: String!
  projects: [Project!]!
  subscription: WorkspaceSubscription
  updatedAt: DateTime!
  users: [User!]!
}

input WorkspaceCreateInput {
  name: String!
}

type WorkspaceMember {
  member: WorkspaceMemberType!
  type: EnumWorkspaceMemberType!
}

union WorkspaceMemberType = Invitation | User

type WorkspaceSubscription {
  cancelUrl: String
  cancellationEffectiveDate: DateTime
  createdAt: DateTime!
  id: String!
  nextBillDate: DateTime
  price: Float
  status: EnumSubscriptionStatus!
  subscriptionPlan: EnumSubscriptionPlan!
  updateUrl: String
  updatedAt: DateTime!
  workspace: Workspace
  workspaceId: String!
}

input WorkspaceUpdateInput {
  allowLLMFeatures: Boolean
  name: String
}
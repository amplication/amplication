# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  githubId: String
}

type Action {
  id: String!
  createdAt: DateTime!
  steps: [ActionStep!]
}

type ActionLog {
  id: String!
  createdAt: DateTime!
  message: String!
  meta: JSONObject!
  level: EnumActionLogLevel!
}

type ActionStep {
  id: String!
  createdAt: DateTime!
  name: String!
  message: String!
  status: EnumActionStepStatus!
  completedAt: DateTime
  logs: [ActionLog!]
}

type App {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  color: String!
  entities(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, take: Int): [Entity!]!
  environments: [Environment!]!
  builds(where: BuildWhereInput, orderBy: BuildOrderByInput, take: Int, skip: Int): [Build!]!
}

input AppCreateInput {
  name: String!
  description: String!
  color: String
}

input AppOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  description: SortOrder
}

type AppRole {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  displayName: String!
  description: String
}

input AppRoleCreateInput {
  name: String!
  description: String!
  displayName: String!
  app: WhereParentIdInput!
}

input AppRoleOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  displayName: SortOrder
  description: SortOrder
}

input AppRoleUpdateInput {
  name: String
  description: String
  displayName: String!
}

input AppRoleWhereInput {
  id: String
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  displayName: StringFilter
  description: StringFilter
  app: WhereUniqueInput
}

input AppUpdateInput {
  name: String
  description: String
  color: String
}

input AppWhereInput {
  id: String
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  description: StringFilter
}

type Auth {
  """JWT Bearer token"""
  token: String!
  account: Account!
}

type Block {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  app: App
  parentBlock: Block
  displayName: String!
  description: String!
  blockType: EnumBlockType!
  versionNumber: Float
}

type BlockInputOutput {
  name: String!
  description: String!
  dataType: EnumDataType
  dataTypeEntityName: String
  isList: Boolean
  includeAllPropertiesByDefault: Boolean
  propertyList: [PropertySelector!]
}

input BlockInputOutputInput {
  name: String!
  description: String!
  dataType: EnumDataType
  dataTypeEntityName: String
  isList: Boolean
  includeAllPropertiesByDefault: Boolean
  propertyList: [PropertySelectorInput!]
}

input BlockOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  blockType: SortOrder
  displayName: SortOrder
  description: SortOrder
}

input BlockUpdateInput {
  displayName: String
  description: String
}

type BlockVersion {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  block: Block!
  versionNumber: Int!
  label: String!
}

input BlockVersionCreateInput {
  label: String!
  block: WhereParentIdInput!
}

input BlockVersionOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  versionNumber: SortOrder
  label: SortOrder
}

input BlockVersionWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  versionNumber: IntFilter
  label: StringFilter
  block: WhereUniqueInput
}

input BlockWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  app: WhereUniqueInput
  parentBlock: WhereUniqueInput
  blockType: EnumBlockTypeFilter
  displayName: StringFilter
  description: StringFilter
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Build {
  id: String!
  createdAt: DateTime!
  app: App!
  appId: String!
  createdBy: User!
  userId: String!
  status: EnumBuildStatus
  archiveURI: String!
  version: String!
  message: String!
  actionId: String!
  action: Action
  deployments: [Deployment!]
}

input BuildCreateInput {
  app: WhereParentIdInput!
  version: String!
  message: String!
}

input BuildOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  userId: SortOrder
  status: SortOrder
  version: SortOrder
  message: SortOrder
}

input BuildWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  app: WhereUniqueInput!
  createdBy: WhereUniqueInput
  version: StringFilter
  message: StringFilter
}

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

type Commit {
  id: String!
  createdAt: DateTime!
  userId: String!
  user: User
  message: String!
}

input CommitCreateInput {
  message: String!
  app: WhereParentIdInput!
}

input CommitOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  message: SortOrder
}

input CommitWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  app: WhereUniqueInput!
  user: WhereUniqueInput
  message: StringFilter
}

type ConnectorRestApi implements IBlock {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parentBlock: Block
  displayName: String!
  description: String!
  blockType: EnumBlockType!
  versionNumber: Float!
  inputParameters: [BlockInputOutput!]!
  outputParameters: [BlockInputOutput!]!
  authenticationType: EnumConnectorRestApiAuthenticationType!
  privateKeyAuthenticationSettings: PrivateKeyAuthenticationSettings
  httpBasicAuthenticationSettings: HttpBasicAuthenticationSettings
}

type ConnectorRestApiCall implements IBlock {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parentBlock: Block
  displayName: String!
  description: String!
  blockType: EnumBlockType!
  versionNumber: Float!
  inputParameters: [BlockInputOutput!]!
  outputParameters: [BlockInputOutput!]!
  url: String!
}

input ConnectorRestApiCallCreateInput {
  displayName: String!
  description: String
  app: WhereParentIdInput!
  parentBlock: WhereParentIdInput
  inputParameters: [BlockInputOutputInput!]
  outputParameters: [BlockInputOutputInput!]
  url: String!
}

input ConnectorRestApiCallOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  blockType: SortOrder
  displayName: SortOrder
  description: SortOrder
}

input ConnectorRestApiCallWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  app: WhereUniqueInput
  parentBlock: WhereUniqueInput
  displayName: StringFilter
  description: StringFilter
}

input ConnectorRestApiCreateInput {
  displayName: String!
  description: String
  app: WhereParentIdInput!
  parentBlock: WhereParentIdInput
  inputParameters: [BlockInputOutputInput!]
  outputParameters: [BlockInputOutputInput!]
  authenticationType: EnumConnectorRestApiAuthenticationType!
  privateKeyAuthenticationSettings: PrivateKeyAuthenticationSettingsInput
  httpBasicAuthenticationSettings: HttpBasicAuthenticationSettingsInput
}

input ConnectorRestApiOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  blockType: SortOrder
  displayName: SortOrder
  description: SortOrder
}

input ConnectorRestApiWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  app: WhereUniqueInput
  parentBlock: WhereUniqueInput
  displayName: StringFilter
  description: StringFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  not: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
}

type Deployment {
  id: String!
  createdAt: DateTime!
  createdBy: User!
  userId: String!
  build: Build!
  buildId: String!
  environment: Environment!
  environmentId: String!
  status: EnumDeploymentStatus!
  message: String!
  actionId: String!
}

input DeploymentCreateInput {
  build: WhereParentIdInput!
  environment: WhereParentIdInput!
  message: String
}

input DeploymentOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  userId: SortOrder
  status: SortOrder
  message: SortOrder
}

input DeploymentWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  build: WhereUniqueInput!
  environment: WhereUniqueInput!
  status: EnumDeploymentStatusFilter
  createdBy: WhereUniqueInput
  message: StringFilter
}

type Entity {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  app: App
  appId: String!
  name: String!
  displayName: String!
  pluralDisplayName: String!
  description: String
  versions(where: EntityVersionWhereInput, orderBy: EntityVersionOrderByInput, skip: Int, take: Int): [EntityVersion!]
  fields(where: EntityFieldWhereInput, orderBy: EntityFieldOrderByInput, skip: Int, take: Int): [EntityField!]
  permissions: [EntityPermission!]
  lockedByUserId: String
  lockedByUser: User
  lockedAt: DateTime
}

input EntityAddPermissionFieldInput {
  action: EnumEntityAction!
  fieldName: String!
  entity: WhereParentIdInput!
}

input EntityCreateInput {
  name: String!
  displayName: String!
  pluralDisplayName: String!
  description: String
  app: WhereParentIdInput!
}

type EntityField {
  id: String!
  permanentId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  displayName: String!
  dataType: EnumDataType!
  properties: JSONObject
  required: Boolean!
  searchable: Boolean!
  description: String
  position: Int
}

input EntityFieldCreateByDisplayNameInput {
  displayName: String!
  entity: WhereParentIdInput!
}

input EntityFieldCreateInput {
  name: String!
  displayName: String!
  dataType: EnumDataType!
  properties: JSONObject!
  required: Boolean!
  searchable: Boolean!
  description: String!
  entity: WhereParentIdInput!
  position: Int
}

input EntityFieldFilter {
  every: EntityFieldWhereInput
  some: EntityFieldWhereInput
  none: EntityFieldWhereInput
}

input EntityFieldOrderByInput {
  id: SortOrder
  permanentId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  displayName: SortOrder
  dataType: SortOrder
  required: SortOrder
  searchable: SortOrder
  description: SortOrder
  position: SortOrder
}

input EntityFieldUpdateInput {
  name: String
  displayName: String
  dataType: EnumDataType
  properties: JSONObject
  required: Boolean
  searchable: Boolean
  description: String
  position: Int
}

input EntityFieldWhereInput {
  id: StringFilter
  permanentId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  displayName: StringFilter
  dataType: EnumDataTypeFilter
  required: BooleanFilter
  searchable: BooleanFilter
  description: StringFilter
}

input EntityOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  displayName: SortOrder
  pluralDisplayName: SortOrder
  description: SortOrder
}

type EntityPage implements IBlock {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parentBlock: Block
  displayName: String!
  description: String!
  blockType: EnumBlockType!
  versionNumber: Float!
  inputParameters: [BlockInputOutput!]!
  outputParameters: [BlockInputOutput!]!
  entityId: String!
  pageType: EnumEntityPageType!
  singleRecordSettings: EntityPageSingleRecordSettings
  listSettings: EntityPageListSettings
  showAllFields: Boolean!
  showFieldList: [String!]
}

input EntityPageCreateInput {
  displayName: String!
  description: String
  app: WhereParentIdInput!
  parentBlock: WhereParentIdInput
  inputParameters: [BlockInputOutputInput!]
  outputParameters: [BlockInputOutputInput!]
  entityId: String
  pageType: EnumEntityPageType!
  singleRecordSettings: EntityPageSingleRecordSettingsInput
  listSettings: EntityPageListSettingsInput
  showAllFields: Boolean!
  showFieldList: [String!]
}

type EntityPageListSettings implements IEntityPageSettings {
  allowCreation: Boolean!
  allowDeletion: Boolean!
  enableSearch: Boolean!
  navigateToPageId: String
}

input EntityPageListSettingsInput {
  allowCreation: Boolean!
  allowDeletion: Boolean!
  enableSearch: Boolean!
  navigateToPageId: String
}

input EntityPageOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  blockType: SortOrder
  displayName: SortOrder
  description: SortOrder
}

type EntityPageSingleRecordSettings implements IEntityPageSettings {
  allowCreation: Boolean!
  allowDeletion: Boolean!
  allowUpdate: Boolean!
}

input EntityPageSingleRecordSettingsInput {
  allowCreation: Boolean!
  allowDeletion: Boolean!
  allowUpdate: Boolean!
}

input EntityPageUpdateInput {
  displayName: String
  description: String
  entityId: String
  pageType: EnumEntityPageType!
  singleRecordSettings: EntityPageSingleRecordSettingsInput
  listSettings: EntityPageListSettingsInput
  showAllFields: Boolean!
  showFieldList: [String!]
}

input EntityPageWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  app: WhereUniqueInput
  parentBlock: WhereUniqueInput
  displayName: StringFilter
  description: StringFilter
}

type EntityPermission {
  id: String!
  entityVersionId: String!
  entityVersion: EntityVersion
  action: EnumEntityAction!
  type: EnumEntityPermissionType!
  permissionRoles: [EntityPermissionRole!]
  permissionFields: [EntityPermissionField!]
}

type EntityPermissionField {
  id: String!
  permissionId: String!
  permission: EntityPermission
  fieldPermanentId: String!
  entityVersionId: String!
  field: EntityField!
  permissionFieldRoles: [EntityPermissionRole!]
}

input EntityPermissionFieldWhereUniqueInput {
  entityId: String!
  action: EnumEntityAction!
  fieldPermanentId: String!
}

type EntityPermissionRole {
  id: String!
  entityVersionId: String!
  action: EnumEntityAction!
  entityPermission: EntityPermission
  appRoleId: String!
  appRole: AppRole!
}

input EntityUpdateInput {
  name: String
  displayName: String
  pluralDisplayName: String
  description: String
}

input EntityUpdatePermissionFieldRolesInput {
  permissionField: WhereParentIdInput!
  deletePermissionRoles: [WhereUniqueInput!]
  addPermissionRoles: [WhereUniqueInput!]
}

input EntityUpdatePermissionInput {
  action: EnumEntityAction!
  type: EnumEntityPermissionType!
}

input EntityUpdatePermissionRolesInput {
  action: EnumEntityAction!
  entity: WhereParentIdInput!
  deleteRoles: [WhereUniqueInput!]
  addRoles: [WhereUniqueInput!]
}

type EntityVersion {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  entityId: String!
  entity: Entity!
  versionNumber: Int!
  name: String!
  displayName: String!
  pluralDisplayName: String!
  description: String
  commit: Commit
  fields(where: EntityFieldWhereInput, orderBy: EntityFieldOrderByInput, skip: Int, take: Int): [EntityField!]!
  permissions: [EntityPermission!]
}

input EntityVersionOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  versionNumber: SortOrder
  name: SortOrder
  displayName: SortOrder
  pluralDisplayName: SortOrder
  description: SortOrder
  label: SortOrder
}

input EntityVersionWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  versionNumber: IntFilter
  name: StringFilter
  displayName: StringFilter
  pluralDisplayName: StringFilter
  description: StringFilter
  label: StringFilter
  entity: WhereUniqueInput
}

input EntityWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  displayName: StringFilter
  pluralDisplayName: StringFilter
  description: StringFilter
  fields: EntityFieldFilter
  app: WhereUniqueInput
}

enum EnumActionLogLevel {
  Error
  Warning
  Info
  Debug
}

enum EnumActionStepStatus {
  Waiting
  Running
  Failed
  Success
}

enum EnumBlockType {
  AppSettings
  Flow
  ConnectorRestApi
  ConnectorRestApiCall
  ConnectorSoapApi
  ConnectorFile
  EntityApi
  EntityApiEndpoint
  FlowApi
  Layout
  CanvasPage
  EntityPage
  Document
}

input EnumBlockTypeFilter {
  equals: EnumBlockType
  not: EnumBlockType
  in: [EnumBlockType!]
  notIn: [EnumBlockType!]
}

enum EnumBuildStatus {
  Running
  Completed
  Failed
  Invalid
}

enum EnumConnectorRestApiAuthenticationType {
  None
  PrivateKey
  HttpBasicAuthentication
  OAuth2PasswordFlow
  OAuth2UserAgentFlow
}

enum EnumDataType {
  SingleLineText
  MultiLineText
  Email
  AutoNumber
  WholeNumber
  DateTime
  DecimalNumber
  Lookup
  MultiSelectOptionSet
  OptionSet
  Boolean
  GeographicAddress
  Id
  CreatedAt
  UpdatedAt
}

input EnumDataTypeFilter {
  equals: EnumDataType
  not: EnumDataType
  in: [EnumDataType!]
  notIn: [EnumDataType!]
}

enum EnumDeploymentStatus {
  Waiting
  Completed
  Failed
  Removed
}

input EnumDeploymentStatusFilter {
  equals: EnumDeploymentStatus
  not: EnumDeploymentStatus
  in: [EnumDeploymentStatus!]
  notIn: [EnumDeploymentStatus!]
}

enum EnumEntityAction {
  View
  Create
  Update
  Delete
  Search
}

enum EnumEntityPageType {
  SingleRecord
  List
  MasterDetails
}

enum EnumEntityPermissionType {
  AllRoles
  Granular
  Disabled
}

enum EnumPendingChangeAction {
  Create
  Update
  Delete
}

enum EnumPendingChangeResourceType {
  Entity
  Block
}

type Environment {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  app: App!
  appId: String!
  name: String!
  description: String
  address: String!
  domain: String!
  url: String!
}

input EnvironmentUpdateInput {
  name: String
  description: String
  address: String!
}

type HttpBasicAuthenticationSettings {
  username: String!
  password: String!
}

input HttpBasicAuthenticationSettingsInput {
  username: String!
  password: String!
}

interface IBlock {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parentBlock: Block
  displayName: String!
  description: String!
  blockType: EnumBlockType!
  versionNumber: Float!
  inputParameters: [BlockInputOutput!]!
  outputParameters: [BlockInputOutput!]!
}

interface IEntityPageSettings {
  allowCreation: Boolean!
  allowDeletion: Boolean!
}

input IntFilter {
  equals: Int
  not: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

input InviteUserInput {
  email: String!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  updateAccount(data: UpdateAccountInput!): Account!
  deleteOrganization(where: WhereUniqueInput!): Organization
  updateOrganization(data: OrganizationUpdateInput!, where: WhereUniqueInput!): Organization
  inviteUser(data: InviteUserInput!): User
  assignRoleToUser(data: UserRoleInput!, where: WhereUniqueInput!): User
  removeRoleFromUser(data: UserRoleInput!, where: WhereUniqueInput!): User
  createOneEntity(data: EntityCreateInput!): Entity!
  deleteEntity(where: WhereUniqueInput!): Entity
  updateEntity(data: EntityUpdateInput!, where: WhereUniqueInput!): Entity
  lockEntity(where: WhereUniqueInput!): Entity
  updateEntityPermission(data: EntityUpdatePermissionInput!, where: WhereUniqueInput!): EntityPermission
  updateEntityPermissionRoles(data: EntityUpdatePermissionRolesInput!): EntityPermission
  addEntityPermissionField(data: EntityAddPermissionFieldInput!): EntityPermissionField
  deleteEntityPermissionField(where: EntityPermissionFieldWhereUniqueInput!): EntityPermissionField
  updateEntityPermissionFieldRoles(data: EntityUpdatePermissionFieldRolesInput!): EntityPermissionField
  createEntityField(data: EntityFieldCreateInput!): EntityField
  createEntityFieldByDisplayName(data: EntityFieldCreateByDisplayNameInput!): EntityField
  deleteEntityField(where: WhereUniqueInput!): EntityField
  updateEntityField(data: EntityFieldUpdateInput!, where: WhereUniqueInput!): EntityField
  createAppRole(data: AppRoleCreateInput!): AppRole!
  deleteAppRole(where: WhereUniqueInput!): AppRole
  updateAppRole(data: AppRoleUpdateInput!, where: WhereUniqueInput!): AppRole
  createBuild(data: BuildCreateInput!): Build!
  createDeployment(data: DeploymentCreateInput!): Deployment!
  updateEnvironment(data: EnvironmentUpdateInput!, where: WhereUniqueInput!): Environment
  createApp(data: AppCreateInput!): App!
  deleteApp(where: WhereUniqueInput!): App
  updateApp(data: AppUpdateInput!, where: WhereUniqueInput!): App
  commit(data: CommitCreateInput!): Commit
  discardPendingChanges(data: PendingChangesDiscardInput!): Boolean
  signup(data: SignupInput!): Auth!
  login(data: LoginInput!): Auth!
  changePassword(data: ChangePasswordInput!): Account!
  setCurrentOrganization(data: WhereUniqueInput!): Auth!
  createConnectorRestApi(data: ConnectorRestApiCreateInput!): ConnectorRestApi!
  updateConnectorRestApi(data: BlockUpdateInput!, where: WhereUniqueInput!): ConnectorRestApi!
  createBlockVersion(data: BlockVersionCreateInput!): Block!
  createConnectorRestApiCall(data: ConnectorRestApiCallCreateInput!): ConnectorRestApiCall!
  updateConnectorRestApiCall(data: BlockUpdateInput!, where: WhereUniqueInput!): ConnectorRestApiCall!
  createEntityPage(data: EntityPageCreateInput!): EntityPage!
  updateEntityPage(data: EntityPageUpdateInput!, where: WhereUniqueInput!): EntityPage!
}

type Organization {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  defaultTimeZone: String!
  address: String!
  apps: [App!]!
  users: [User!]!
}

input OrganizationOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  defaultTimeZone: SortOrder
  address: SortOrder
}

input OrganizationUpdateInput {
  name: String
  defaultTimeZone: String
  address: String
}

input OrganizationWhereInput {
  id: String
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  defaultTimeZone: StringFilter
  address: StringFilter
}

type PendingChange {
  action: EnumPendingChangeAction!
  resourceType: EnumPendingChangeResourceType!
  resourceId: String!
  resource: PendingChangeResource!
  versionNumber: Int!
}

union PendingChangeResource = Entity | Block

input PendingChangesDiscardInput {
  app: WhereParentIdInput!
}

input PendingChangesFindInput {
  app: WhereUniqueInput!
}

type PrivateKeyAuthenticationSettings {
  keyName: String!
  keyValue: String!
  type: String!
}

input PrivateKeyAuthenticationSettingsInput {
  keyName: String!
  keyValue: String!
  type: String!
}

type PropertySelector {
  propertyName: String!
  include: Boolean!
}

input PropertySelectorInput {
  propertyName: String!
  include: Boolean!
}

type Query {
  me: User!
  organization(where: WhereUniqueInput!): Organization
  organizations(where: OrganizationWhereInput, orderBy: OrganizationOrderByInput, skip: Int, take: Int): [Organization!]!
  user(where: WhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, take: Int): [User!]!
  entity(where: WhereUniqueInput!): Entity
  entities(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, take: Int): [Entity!]!
  appRole(where: WhereUniqueInput!, version: Float): AppRole
  appRoles(where: AppRoleWhereInput, orderBy: AppRoleOrderByInput, skip: Int, take: Int): [AppRole!]!
  builds(where: BuildWhereInput, orderBy: BuildOrderByInput, take: Int, skip: Int): [Build!]!
  build(where: WhereUniqueInput!): Build!
  action(where: WhereUniqueInput!): Action!
  deployments(where: DeploymentWhereInput, orderBy: DeploymentOrderByInput, take: Int, skip: Int): [Deployment!]!
  deployment(where: WhereUniqueInput!): Deployment!
  app(where: WhereUniqueInput!): App
  apps(where: AppWhereInput, orderBy: AppOrderByInput, skip: Int, take: Int): [App!]!
  pendingChanges(where: PendingChangesFindInput!): [PendingChange!]!
  commits(where: CommitWhereInput, orderBy: CommitOrderByInput, skip: Int, take: Int): [Commit!]!
  ConnectorRestApi(where: WhereUniqueInput!, version: Float): ConnectorRestApi
  ConnectorRestApis(where: ConnectorRestApiWhereInput, orderBy: ConnectorRestApiOrderByInput, skip: Int, take: Int): [ConnectorRestApi!]!
  blockVersions(where: BlockVersionWhereInput, orderBy: BlockVersionOrderByInput, skip: Int, take: Int): [BlockVersion!]!
  blocks(where: BlockWhereInput, orderBy: BlockOrderByInput, skip: Int, take: Int): [Block!]!
  ConnectorRestApiCall(where: WhereUniqueInput!, version: Float): ConnectorRestApiCall
  ConnectorRestApiCalls(where: ConnectorRestApiCallWhereInput, orderBy: ConnectorRestApiCallOrderByInput, skip: Int, take: Int): [ConnectorRestApiCall!]!
  EntityPage(where: WhereUniqueInput!, version: Float): EntityPage
  EntityPages(where: EntityPageWhereInput, orderBy: EntityPageOrderByInput, skip: Int, take: Int): [EntityPage!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum Role {
  Admin
  User
  OrganizationAdmin
  ProjectAdmin
}

input SignupInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  organizationName: String!
  defaultTimeZone: String!
  address: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
}

input UpdateAccountInput {
  firstName: String
  lastName: String
}

type User {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  account: Account
  organization: Organization
  userRoles: [UserRole!]
}

input UserOrderByInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

type UserRole {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  role: Role!
}

input UserRoleInput {
  role: Role!
}

input UserWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  organization: OrganizationWhereInput
}

input WhereParentIdInput {
  connect: WhereUniqueInput!
}

input WhereUniqueInput {
  id: String!
}

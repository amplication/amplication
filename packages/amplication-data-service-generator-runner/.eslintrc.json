{
  "extends": ["../../.eslintrc.json"],
  "ignorePatterns": ["!**/*"],
  "overrides": [
    {
      // Templates
      "files": ["*.template.ts", "*.template.tsx"],
      "rules": {
        "@typescript-eslint/no-empty-interface": "off",
        "import/no-unresolved": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase"]
          },
          {
            "selector": "variable",
            "modifiers": ["const"],
            "format": ["camelCase", "UPPER_CASE"]
          },
          {
            "selector": "property",
            "format": ["camelCase", "UPPER_CASE"]
          },
          {
            "selector": "method",
            "format": ["camelCase", "UPPER_CASE"]
          },
          {
            "selector": "variable",
            "modifiers": ["const"],
            "types": ["function"],
            "format": ["camelCase", "PascalCase", "UPPER_CASE"]
          },
          {
            "selector": "typeLike",
            "format": ["PascalCase", "UPPER_CASE"]
          },
          {
            "selector": "enumMember",
            "format": ["PascalCase"]
          }
        ]
      }
    },
    {
      // Static files
      "files": ["**/static/**/*.ts"],
      "rules": {
        "import/no-unresolved": "off"
      }
    },
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {}
    },
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {}
    },
    {
      "files": ["*.js", "*.jsx"],
      "rules": {}
    }
  ],
  "rules": {
    "@typescript-eslint/ban-ts-comment": "off",
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "import/no-cycle": "off",
    "import/no-unresolved": "error",
    "@typescript-eslint/camelcase": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase"]
      },
      {
        "selector": "variable",
        "modifiers": ["const"],
        "format": ["camelCase", "UPPER_CASE"]
      },
      {
        "selector": "property",
        "format": ["camelCase", "UPPER_CASE"]
      },
      {
        "selector": "variable",
        "modifiers": ["const"],
        "types": ["function"],
        "format": ["camelCase", "PascalCase"]
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": "objectLiteralProperty",
        "format": null
      },
      {
        "selector": "enumMember",
        "format": ["PascalCase"]
      }
    ],
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "args": "none"
      }
    ],
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-non-null-assertion": "off"
  }
}
